open import Lattice
open import Scheduler using (Scheduler)
open import Relation.Binary.PropositionalEquality

module Concurrent.Security.Scheduler (ùìõ : Lattice) (ùì¢ : Scheduler ùìõ) where

open import Types ùìõ
open import Scheduler ùìõ
open Scheduler.Scheduler ùìõ ùì¢

open import Concurrent.Security.Erasure

open import Data.Nat


_‚âàÀ¢-‚ü®_,_‚ü©_ : ‚àÄ {l‚Çê} -> State -> ‚Ñï -> ‚Ñï -> State -> Set
_‚âàÀ¢-‚ü®_,_‚ü©_ {l‚Çê} s‚ÇÅ n m s‚ÇÇ = s‚ÇÅ ‚âàÀ¢-‚ü® n ~ l‚Çê ~ m ‚ü© s‚ÇÇ

data Aligned {l} (s‚ÇÅ s‚ÇÇ s‚ÇÅ' : State) (m : Message l) (l‚Çê : Label) : Set where
  low : ‚àÄ {s‚ÇÇ'} -> s‚ÇÅ' ‚ü∂ s‚ÇÇ' ‚Üë m -> s‚ÇÇ ‚âàÀ¢-‚ü® l‚Çê ‚ü© s‚ÇÇ' -> Aligned s‚ÇÅ s‚ÇÇ s‚ÇÅ' m l‚Çê

data HighStep (l‚Çê h : Label) (n : ‚Ñï) (e : Event h) (s‚ÇÅ s‚ÇÇ s‚ÇÅ' : State) (n‚ÇÅ n‚ÇÇ : ‚Ñï) : Set where
  high : ‚àÄ { s‚ÇÇ'} -> ¬¨ h ‚äë l‚Çê ->  s‚ÇÅ' ‚ü∂ s‚ÇÇ' ‚Üë (h , n , e) -> s‚ÇÅ ‚âàÀ¢-‚ü® n‚ÇÅ ~ l‚Çê ~ n‚ÇÇ ‚ü© s‚ÇÇ' -> HighStep l‚Çê h n e s‚ÇÅ s‚ÇÇ s‚ÇÅ' n‚ÇÅ n‚ÇÇ
