open import Lattice
open import Scheduler using (Scheduler)

module Concurrent.Security.Erasure.Base (­ЮЊЏ : Lattice) (­ЮЊб : Scheduler ­ЮЊЏ) where

open import Scheduler ­ЮЊЏ
import Scheduler ­ЮЊЏ as S
open import Types ­ЮЊЏ
open import Sequential.Calculus ­ЮЊЏ
open import Concurrent.Calculus ­ЮЊЏ ­ЮЊб
open import Sequential.Security.Erasure ­ЮЊЏ
open import Concurrent.Communication --TODO remove
open import Concurrent.Semantics ­ЮЊЏ ­ЮЊб
open import Relation.Binary.PropositionalEquality

-- Erasure of thread pool
╬хрхЌ : Рѕђ {n} {l lРѓљ : Label} -> Dec (l РіЉ lРѓљ) -> Pool l n -> Pool l n
╬хрхЌ (yes p) [] = []
╬хрхЌ (yes p) (t РЌЁ ts) = (╬х-Mac _ (yes p) t) РЌЁ (╬хрхЌ (yes p) ts)
╬хрхЌ (yes p) РѕЎ = РѕЎ
╬хрхЌ (no ┬гp) ts = РѕЎ

-- Erasure of pools
╬хр┤Й : Рѕђ {ls} -> Label -> Pools ls -> Pools ls
╬хр┤Й lРѓљ [] = []
╬хр┤Й lРѓљ (_РЌЁ_ {l = l} ts ps) = ╬хрхЌ (l РіЉ? lРѓљ) ts РЌЁ (╬хр┤Й lРѓљ ps)

--------------------------------------------------------------------------------

open import Data.Sum

╬хрхЌ-extensional : Рѕђ {n l lРѓљ} (x y : Dec (l РіЉ lРѓљ)) (ts : Pool l n) -> ╬хрхЌ x ts РЅА ╬хрхЌ y ts
╬хрхЌ-extensional (yes p) (yes pРѓЂ) [] = refl
╬хрхЌ-extensional (yes p) (yes pРѓЂ) (x РЌЁ ts)
  with ╬х-Mac-extensional (yes p) (yes pРѓЂ) x | ╬хрхЌ-extensional (yes p) (yes pРѓЂ) ts
... | eqРѓЂ | eqРѓѓ rewrite  eqРѓЂ | eqРѓѓ = refl
╬хрхЌ-extensional (yes p) (yes pРѓЂ) РѕЎ = refl
╬хрхЌ-extensional (yes p) (no ┬гp) ts = РіЦ-elim (┬гp p)
╬хрхЌ-extensional (no ┬гp) (yes p) ts = РіЦ-elim (┬гp p)
╬хрхЌ-extensional (no ┬гp) (no ┬гpРѓЂ) ts = refl

╬хрхЌРѕЎРЅАРѕЎ : Рѕђ {l lРѓљ} -> (x : Dec (l РіЉ lРѓљ)) -> (n : РёЋ) -> ╬хрхЌ x РѕЎ РЅА (РѕЎ {n = n})
╬хрхЌРѕЎРЅАРѕЎ (yes p) _ = refl
╬хрхЌРѕЎРЅАРѕЎ (no ┬гp) _ = refl

╬х-Рќ╗-РЅА : Рѕђ {n l lРѓљ} (p : l РіЉ lРѓљ) (t : Thread l) (ts : Pool l n) -> ╬хрхЌ (yes p) (ts Рќ╗ t) РЅА (╬хрхЌ (yes p) ts Рќ╗ ╬х-Mac lРѓљ (yes p) t)
╬х-Рќ╗-РЅА p t [] = refl
╬х-Рќ╗-РЅА p t (x РЌЁ ts) with ╬х-Рќ╗-РЅА p t ts
... | eq rewrite eq = refl
╬х-Рќ╗-РЅА p t РѕЎ = refl

╬х-IsValue : Рѕђ {¤ё l lРѓљ} {t : CTerm (Mac l ¤ё)} -> (p : l РіЉ lРѓљ) -> IsValue t -> IsValue (╬х-Mac lРѓљ (yes p) t)
╬х-IsValue p (Mac t) = Mac (╬х _ t)
╬х-IsValue p (MacРѓЊ e) = MacРѓЊ (╬х _ e)

-- Erasure of global configuration
╬хрхЇ : Рѕђ {ls} -> Label -> Global ls -> Global ls
╬хрхЇ lРѓљ РЪе s , ╬Б , ps РЪЕ = РЪе S.Scheduler.╬х╦б ­ЮЊб lРѓљ s , ╬х╦б lРѓљ ╬Б , ╬хр┤Й lРѓљ ps РЪЕ 

╬хрхЅ : Рѕђ {lРѓљ l} -> Dec (l РіЉ lРѓљ) -> Effect l -> Effect l
╬хрхЅ (yes p) РѕЎ = РѕЎ
╬хрхЅ (yes p) РѕЁ = РѕЁ
╬хрхЅ {lРѓљ} (yes p) (fork t) = fork (╬х lРѓљ t)
╬хрхЅ (no ┬гp) e = РѕЎ
                 
