open import Lattice
open import Scheduler using (Scheduler)

module Concurrent.Security.Erasure.LowEq (­ЮЊЏ : Lattice) (­ЮЊб : Scheduler ­ЮЊЏ) where

open import Types ­ЮЊЏ
open import Scheduler ­ЮЊЏ as S
open Scheduler.Scheduler ­ЮЊЏ ­ЮЊб

open import Sequential.Calculus ­ЮЊЏ
open import Sequential.Security.Erasure.Base ­ЮЊЏ
open import Sequential.Security.Erasure.LowEq ­ЮЊЏ as Seq hiding (_РЅѕ╦б-РЪе_РЪЕ_ ; sym-РЅѕ╦б ; trans-РЅѕ╦б) 
open import Concurrent.Calculus ­ЮЊЏ ­ЮЊб
open import Concurrent.Semantics ­ЮЊЏ ­ЮЊб
open import Concurrent.Security.Erasure.Base ­ЮЊЏ ­ЮЊб

open import Relation.Binary.PropositionalEquality
open import Data.Product


--------------------------------------------------------------------------------
-- TODO find good name/symbols for structural low-equivalence

mutual
  data _РЅїр┤Й_ {lРѓљ : Label} {l : Label} : Рѕђ {n m} -> Pool l n -> Pool l m -> Set where
    high : Рѕђ {n m} {pРѓЂ : Pool l n} {pРѓѓ : Pool l m} -> (┬гp : ┬г (l РіЉ lРѓљ)) -> pРѓЂ РЅїр┤Й pРѓѓ
    nil : [] РЅїр┤Й [] 
    cons : Рѕђ {n m} {pРѓЂ : Pool l n} {pРѓѓ : Pool l m} {tРѓЂ tРѓѓ : Thread l} -> l РіЉ lРѓљ -> tРѓЂ РЅѕ-РЪе lРѓљ РЪЕ tРѓѓ -> pРѓЂ РЅїр┤Й-РЪе lРѓљ РЪЕ pРѓѓ -> (tРѓЂ РЌЁ pРѓЂ) РЅїр┤Й (tРѓѓ РЌЁ pРѓѓ)
    bullet : Рѕђ {n m} -> (РѕЎ {n = n}) РЅїр┤Й (РѕЎ {n = m})

  _РЅїр┤Й-РЪе_РЪЕ_ : Рѕђ {l n m} -> Pool l n -> Label -> Pool l m -> Set
  pРѓЂ РЅїр┤Й-РЪе lРѓљ РЪЕ pРѓѓ = _РЅїр┤Й_ {lРѓљ} pРѓЂ pРѓѓ 

-- Is this equivalent to the definition of low-equivalence?
РЅїр┤Й-РЅА : Рѕђ {l lРѓљ n} {pРѓЂ : Pool l n} {pРѓѓ : Pool l n} -> (x : Dec (l РіЉ lРѓљ)) -> pРѓЂ РЅїр┤Й-РЪе lРѓљ РЪЕ pРѓѓ -> ╬хрхЌ x pРѓЂ РЅА ╬хрхЌ x pРѓѓ
РЅїр┤Й-РЅА (yes p) (high ┬гp) = РіЦ-elim (┬гp p)
РЅїр┤Й-РЅА (no ┬гp) (high ┬гpРѓЂ) = refl
РЅїр┤Й-РЅА x nil = refl
РЅїр┤Й-РЅА {l} {lРѓљ} (yes p) (cons {tРѓЂ = tРѓЂ}  {tРѓѓ = tРѓѓ} xРѓЂ (╬х-РЅА eq) xРѓЃ)
  rewrite РЅїр┤Й-РЅА (yes p) xРѓЃ | ╬х-Mac-extensional (yes p) (l РіЉ? lРѓљ) tРѓЂ | ╬х-Mac-extensional (yes p) (l РіЉ? lРѓљ) tРѓѓ | eq = refl
РЅїр┤Й-РЅА (no ┬гp) (cons xРѓЂ xРѓѓ xРѓЃ) = refl
РЅїр┤Й-РЅА x bullet = refl

РЌЁ-РЅА : Рѕђ {l n} {tРѓЂ tРѓѓ : Thread l} {tsРѓЂ tsРѓѓ : Pool l n} ->  _РЅА_ {A = Pool l (suc n)}(_РЌЁ_ {n = n} tРѓЂ tsРѓЂ) (_РЌЁ_ {n = n} tРѓѓ tsРѓѓ) -> (tРѓЂ РЅА tРѓѓ) ├Ќ (tsРѓЂ РЅА tsРѓѓ)
РЌЁ-РЅА refl = refl , refl

РЅА-РЅїр┤Й : Рѕђ {l lРѓљ n} {pРѓЂ : Pool l n} {pРѓѓ : Pool l n} -> (x : Dec (l РіЉ lРѓљ)) -> ╬хрхЌ x pРѓЂ РЅА ╬хрхЌ x pРѓѓ -> pРѓЂ РЅїр┤Й-РЪе lРѓљ РЪЕ pРѓѓ
РЅА-РЅїр┤Й {pРѓЂ = []} {[]} x eq = nil
РЅА-РЅїр┤Й {pРѓЂ = []} {РѕЎ} (yes p) ()
РЅА-РЅїр┤Й {pРѓЂ = []} {РѕЎ} (no ┬гp) refl = high ┬гp
РЅА-РЅїр┤Й {l} {lРѓљ} {pРѓЂ = x РЌЁ pРѓЂ} {xРѓЂ РЌЁ pРѓѓ} (yes p) eq with РЌЁ-РЅА eq
... | eqРѓЂ , eqРѓѓ rewrite ╬х-Mac-extensional (yes p) (l РіЉ? lРѓљ) x | ╬х-Mac-extensional (yes p) (l РіЉ? lРѓљ) xРѓЂ = cons p (╬х-РЅА eqРѓЂ) (РЅА-РЅїр┤Й (yes p) eqРѓѓ)
РЅА-РЅїр┤Й {pРѓЂ = x РЌЁ pРѓЂ} {xРѓЂ РЌЁ pРѓѓ} (no ┬гp) eq = high ┬гp
РЅА-РЅїр┤Й {pРѓЂ = x РЌЁ pРѓЂ} {РѕЎ} (yes p) ()
РЅА-РЅїр┤Й {pРѓЂ = x РЌЁ pРѓЂ} {РѕЎ} (no ┬гp) eq = high ┬гp
РЅА-РЅїр┤Й {pРѓЂ = РѕЎ} {[]} (yes p) ()
РЅА-РЅїр┤Й {pРѓЂ = РѕЎ} {[]} (no ┬гp) eq = high ┬гp
РЅА-РЅїр┤Й {pРѓЂ = РѕЎ} {x РЌЁ pРѓѓ} (yes p) ()
РЅА-РЅїр┤Й {pРѓЂ = РѕЎ} {x РЌЁ pРѓѓ} (no ┬гp) eq = high ┬гp
РЅА-РЅїр┤Й {pРѓЂ = РѕЎ} {РѕЎ} x eq = bullet

--------------------------------------------------------------------------------
-- (psРѓЂ psРѓѓ : Pools ls)

mutual 
  data _РЅѕр┤Й_ {lРѓљ : Label} : Рѕђ {ls} -> Pools ls -> Pools ls -> Set where
    _Рѕи_ : Рѕђ {ls l n} {psРѓЂ psРѓѓ : Pools ls} {tsРѓЂ tsРѓѓ : Pool l n} {u : Unique l ls} -> tsРѓЂ РЅїр┤Й-РЪе lРѓљ РЪЕ tsРѓѓ -> psРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ psРѓѓ -> (tsРѓЂ РЌЁ psРѓЂ) РЅѕр┤Й (tsРѓѓ РЌЁ  psРѓѓ)
    [] : [] РЅѕр┤Й []

  _РЅѕр┤Й-РЪе_РЪЕ_ : Рѕђ {ls} -> Pools ls -> Label -> Pools ls -> Set
  pРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ pРѓѓ = _РЅѕр┤Й_ {lРѓљ} pРѓЂ pРѓѓ 

РЌЁрхќ-РЅАРЂ┐рхў : Рѕђ {l n m ls} {uРѓЂ uРѓѓ : Unique l ls} {psРѓЂ psРѓѓ : Pools ls} {tsРѓЂ : Pool l n} {tsРѓѓ : Pool l m} -> _РЅА_ {A = Pools (l Рѕи ls)} (_РЌЁ_ {{u = uРѓЂ}} tsРѓЂ psРѓЂ) (_РЌЁ_ {{u = uРѓѓ}} tsРѓѓ psРѓѓ)
            -> n РЅА m ├Ќ uРѓЂ РЅА uРѓѓ
РЌЁрхќ-РЅАРЂ┐рхў refl = refl , refl

РЌЁрхќ-РЅА : Рѕђ {l n ls} {uРѓЂ uРѓѓ : Unique l ls} {psРѓЂ psРѓѓ : Pools ls} {tsРѓЂ tsРѓѓ : Pool l n} -> _РЅА_ {A = Pools (l Рѕи ls)} (_РЌЁ_ {{u = uРѓЂ}} tsРѓЂ psРѓЂ) (_РЌЁ_ {{u = uРѓѓ}} tsРѓѓ psРѓѓ)
            -> tsРѓЂ РЅА tsРѓѓ ├Ќ psРѓЂ РЅА psРѓѓ
РЌЁрхќ-РЅА refl = refl , refl


РЅА-РЅѕр┤Й : Рѕђ {lРѓљ ls} {psРѓЂ psРѓѓ : Pools ls} -> ╬хр┤Й lРѓљ psРѓЂ РЅА ╬хр┤Й lРѓљ psРѓѓ -> psРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ psРѓѓ
РЅА-РЅѕр┤Й {psРѓЂ = []} {[]} eq = []
РЅА-РЅѕр┤Й {lРѓљ} {psРѓЂ = _РЌЁ_ {l = l} x psРѓЂ} {xРѓЂ РЌЁ psРѓѓ} eq with РЌЁрхќ-РЅАРЂ┐рхў eq
... | eqРѓЂ , eqРѓѓ rewrite eqРѓЂ | eqРѓѓ with РЌЁрхќ-РЅА eq
... | eqРѓЃ , eqРѓё = РЅА-РЅїр┤Й (l РіЉ? lРѓљ) eqРѓЃ Рѕи РЅА-РЅѕр┤Й eqРѓё

РЅѕр┤Й-РЅА : Рѕђ {lРѓљ ls} {psРѓЂ psРѓѓ : Pools ls} -> psРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ psРѓѓ -> ╬хр┤Й lРѓљ psРѓЂ РЅА ╬хр┤Й lРѓљ psРѓѓ
РЅѕр┤Й-РЅА {lРѓљ} (_Рѕи_ {l = l} ts ps) rewrite РЅїр┤Й-РЅА (l РіЉ? lРѓљ) ts | РЅѕр┤Й-РЅА ps = refl
РЅѕр┤Й-РЅА [] = refl

sym-РЅѕр┤Й : Рѕђ {ls lРѓљ} {pРѓЂ pРѓѓ : Pools ls} -> pРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ pРѓѓ -> pРѓѓ РЅѕр┤Й pРѓЂ
sym-РЅѕр┤Й eq = РЅА-РЅѕр┤Й (sym (РЅѕр┤Й-РЅА eq))

trans-РЅѕр┤Й : Рѕђ {ls lРѓљ} {pРѓЂ pРѓѓ pРѓЃ : Pools ls} -> pРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ pРѓѓ -> pРѓѓ РЅѕр┤Й pРѓЃ -> pРѓЂ РЅѕр┤Й pРѓЃ
trans-РЅѕр┤Й a b = РЅА-РЅѕр┤Й (trans (РЅѕр┤Й-РЅА a) (РЅѕр┤Й-РЅА b))

--------------------------------------------------------------------------------

-- Since we cannot really do anything special with this, it would be best to define this as a synonym
-- data _РЅѕрхђ_ {{lРѓљ : Label}} (sРѓЂ sРѓѓ : State) : Set where
--   ╬х-РЅА : ╬х-state lРѓљ sРѓЂ РЅА ╬х-state lРѓљ sРѓѓ -> sРѓЂ РЅѕрхђ sРѓѓ


-- _РЅѕрхђ_ : {lРѓљ : Label} (sРѓЂ sРѓѓ : State ­ЮЊб) -> Set
-- _РЅѕрхђ_ {lРѓљ} sРѓЂ sРѓѓ = sРѓЂ РЅѕрхђ-РЪе lРѓљ РЪЕ sРѓѓ

-- We need РЅѕрхђ to be an isomoprphic to the ╬х based defintion
-- Then we can even prove that it is an equivalence relation

postulate РЅѕ╦б-РЅА : Рѕђ {lРѓљ : Label} {sРѓЂ sРѓѓ : State} -> sРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓѓ -> S.Scheduler.╬х╦б ­ЮЊб lРѓљ sРѓЂ РЅА S.Scheduler.╬х╦б ­ЮЊб lРѓљ sРѓѓ
postulate РЅА-РЅѕ╦б : Рѕђ {lРѓљ sРѓЂ sРѓѓ} -> S.Scheduler.╬х╦б ­ЮЊб lРѓљ sРѓЂ РЅА S.Scheduler.╬х╦б ­ЮЊб lРѓљ sРѓѓ -> sРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓѓ

postulate sym-РЅѕ╦б : Рѕђ {lРѓљ} {sРѓЂ sРѓѓ : State} -> sРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓѓ -> sРѓѓ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓЂ
-- sym-РЅѕ╦б x = sym x

postulate trans-РЅѕ╦б : Рѕђ {lРѓљ} {sРѓЂ sРѓѓ sРѓЃ : State} -> sРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓѓ -> sРѓѓ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓЃ -> sРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ sРѓЃ
-- trans-РЅѕ╦б x y = trans x y


-- --------------------------------------------------------------------------------

-- Global l-equivalence
mutual
  data _РЅѕрхЇ_ {lРѓљ : Label} {ls : List Label} (gРѓЂ gРѓѓ : Global ls) : Set where
    РЪе_,_,_РЪЕ : state gРѓЂ РЅѕ╦б-РЪе lРѓљ РЪЕ  state gРѓѓ -> storeрхЇ gРѓЂ Seq.РЅѕ╦б-РЪе lРѓљ РЪЕ storeрхЇ gРѓѓ -> pools gРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ pools gРѓѓ -> gРѓЂ РЅѕрхЇ gРѓѓ

  _РЅѕрхЇ-РЪе_РЪЕ_ : Рѕђ {ls} -> Global ls -> Label -> Global ls -> Set
  gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ = _РЅѕрхЇ_ {lРѓљ} gРѓЂ gРѓѓ

sym-РЅѕрхЇ : Рѕђ {ls lРѓљ} {gРѓЂ gРѓѓ : Global ls} -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ -> gРѓѓ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓЂ
sym-РЅѕрхЇ РЪе x , y , z РЪЕ = РЪе (sym-РЅѕ╦б x) , (Seq.sym-РЅѕ╦б y) , (sym-РЅѕр┤Й z) РЪЕ

trans-РЅѕрхЇ : Рѕђ {ls lРѓљ} {gРѓЂ gРѓѓ gРѓЃ : Global ls} -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ -> gРѓѓ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓЃ -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓЃ
trans-РЅѕрхЇ РЪе xРѓЂ , yРѓЂ , zРѓЂ РЪЕ РЪе xРѓѓ , yРѓѓ , zРѓѓ РЪЕ = РЪе trans-РЅѕ╦б xРѓЂ xРѓѓ , Seq.trans-РЅѕ╦б yРѓЂ yРѓѓ , trans-РЅѕр┤Й zРѓЂ zРѓѓ РЪЕ

postulate refl-РЅѕрхЇ : Рѕђ {lРѓљ ls} {g : Global ls}  -> g РЅѕрхЇ-РЪе lРѓљ РЪЕ g
 
unlift-РЅѕрхЇ : Рѕђ {lРѓљ ls} {gРѓЂ gРѓѓ : Global ls} -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ -> ╬хрхЇ lРѓљ gРѓЂ РЅА ╬хрхЇ lРѓљ gРѓѓ
unlift-РЅѕрхЇ {gРѓЂ = РЪе state , storeрхЇ , pools РЪЕ} {РЪе stateРѓЂ , storeрхЇРѓЂ , poolsРѓЂ РЪЕ} РЪе x , ╬х╦б-РЅА y , z РЪЕ
  with РЅѕ╦б-РЅА x | РЅѕр┤Й-РЅА z
... | eqРѓЂ | eqРѓѓ rewrite eqРѓЂ | eqРѓѓ | y = refl

lift-РЅѕрхЇ :  Рѕђ {lРѓљ ls} {gРѓЂ gРѓѓ : Global ls}  -> ╬хрхЇ lРѓљ gРѓЂ РЅА ╬хрхЇ lРѓљ gРѓѓ -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ
lift-РЅѕрхЇ {gРѓЂ = РЪе state , storeрхЇ , pools РЪЕ} {РЪе stateРѓЂ , storeрхЇРѓЂ , poolsРѓЂ РЪЕ} eq = РЪе РЅА-РЅѕ╦б (state-РЅА eq) , ╬х╦б-РЅА (storeрхЇ-РЅА eq) , РЅА-РЅѕр┤Й (pools-РЅА eq) РЪЕ

--------------------------------------------------------------------------------
-- Easy access without explicit pattern matching,
-- TODO not useful remove

-- РЅѕрхЇ-РЅѕр┤Й : Рѕђ {lРѓљ ls} {gРѓЂ gРѓѓ : Global ls} -> gРѓЂ РЅѕрхЇ-РЪе lРѓљ РЪЕ gРѓѓ -> pools gРѓЂ РЅѕр┤Й-РЪе lРѓљ РЪЕ pools gРѓѓ
-- РЅѕрхЇ-РЅѕр┤Й РЪе sРѓЂРЅѕsРѓѓ , ╬БРѓЂРЅѕ╬БРѓѓ , psРѓЂРЅѕpsРѓѓ РЪЕ = psРѓЂРЅѕpsРѓѓ

