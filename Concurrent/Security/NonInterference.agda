open import Lattice 
open import Scheduler using (Scheduler)

module Concurrent.Security.NonInterference (ùìõ : Lattice) (ùì¢ : Scheduler ùìõ) where

open import Types ùìõ
open import Scheduler ùìõ renaming ( _,_,_ to ‚ü™_,_,_‚ü´ )
open Scheduler.Scheduler ùìõ ùì¢ 

open import Sequential.Calculus ùìõ
open import Sequential.Semantics ùìõ
open import Sequential.Security.Distributivity ùìõ renaming (ŒµÀ¢-‚â° to high-stepÀ¢)
open import Sequential.Security.Erasure.LowEq ùìõ
open import Sequential.Security.NonInterference ùìõ -- hiding (_‚âà·µñ_ ; non-interference)

open import Concurrent.Determinism ùìõ ùì¢
open import Concurrent.Security.Distributivity ùìõ ùì¢
open import Concurrent.Semantics ùìõ ùì¢
open import Concurrent.Calculus ùìõ ùì¢
open import Concurrent.Security.Erasure ùìõ ùì¢
open import Concurrent.Security.Scheduler ùìõ ùì¢

open import Data.Product 
open import Relation.Binary.PropositionalEquality

--open Global

--------------------------------------------------------------------------------

-- Progress insensitive non-interference
simulation‚Ü™ : ‚àÄ {ls l n} {{l‚Çê : Label}} {g‚ÇÅ g‚ÇÇ g‚ÇÅ' g‚ÇÇ' : Global ls} ->
                    g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ ->
                    l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÅ' ->
                    l , n ‚ä¢ g‚ÇÇ ‚Ü™ g‚ÇÇ' ->
                    g‚ÇÅ' ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ'
simulation‚Ü™ {{l‚Çê}} p s‚ÇÅ s‚ÇÇ = lift-‚âà·µç (aux (unlift-‚âà·µç p) (Œµ·µç-dist l‚Çê s‚ÇÅ) (Œµ·µç-dist l‚Çê s‚ÇÇ))
  where aux : ‚àÄ {ls l n} {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : Global ls} -> t‚ÇÅ ‚â° t‚ÇÇ -> l , n ‚ä¢ t‚ÇÅ ‚Ü™ t‚ÇÉ -> l , n ‚ä¢ t‚ÇÇ ‚Ü™ t‚ÇÑ -> t‚ÇÉ ‚â° t‚ÇÑ
        aux refl s‚ÇÅ s‚ÇÇ = determinism‚Ü™ s‚ÇÅ s‚ÇÇ

--------------------------------------------------------------------------------

high-step : ‚àÄ {l‚Çê l ls n} {g‚ÇÅ g‚ÇÇ : Global ls} -> ¬¨ (l ‚äë l‚Çê) -> l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ
high-step ¬¨p (step r st sc w) = ‚ü® ‚â°-‚âàÀ¢ ((Œµ-sch-‚â° ¬¨p sc)) , ŒµÀ¢-‚â° (high-stepÀ¢ _ ¬¨p (stepOf st)) , ‚â°-‚âà·¥æ (Œµ-update·µñ-‚â° ¬¨p w) ‚ü©
high-step ¬¨p (fork r‚ÇÅ r‚ÇÇ st sc  w‚ÇÅ w‚ÇÇ)
  = ‚ü® ‚â°-‚âàÀ¢ ((Œµ-sch-‚â° ¬¨p sc)) , ŒµÀ¢-‚â° (high-stepÀ¢ _ ¬¨p (stepOf st)) , ‚â°-‚âà·¥æ (trans (Œµ-update·µó-‚â° (trans-‚ã¢ (fork-‚äë st) ¬¨p) w‚ÇÅ) (Œµ-update·µñ-‚â° ¬¨p w‚ÇÇ)) ‚ü©
high-step ¬¨p (hole r st sc) = ‚ü® ‚â°-‚âàÀ¢ ((Œµ-sch-‚â° ¬¨p sc)) , ŒµÀ¢-‚â° refl , ‚â°-‚âà·¥æ refl ‚ü©
high-step ¬¨p (skip r b sc) = ‚ü® ‚â°-‚âàÀ¢ ((Œµ-sch-‚â° ¬¨p sc)) , ŒµÀ¢-‚â° refl , ‚â°-‚âà·¥æ refl ‚ü©
high-step ¬¨p (exit r isV sc) = ‚ü® ‚â°-‚âàÀ¢ ((Œµ-sch-‚â° ¬¨p sc)) , ŒµÀ¢-‚â° refl , ‚â°-‚âà·¥æ refl ‚ü©

read-‚âå·¥æ : ‚àÄ {l l‚Çê n n'} {t‚ÇÅ : Thread l} {ts‚ÇÅ ts‚ÇÇ : Pool l n} -> l ‚äë l‚Çê -> ts‚ÇÅ ‚âå·¥æ-‚ü® l‚Çê ‚ü© ts‚ÇÇ -> LookupThread t‚ÇÅ n' ts‚ÇÅ -> ‚àÉ (Œª t‚ÇÇ -> LookupThread t‚ÇÇ n' ts‚ÇÇ √ó t‚ÇÅ ‚âà-‚ü® l‚Çê ‚ü© t‚ÇÇ)
read-‚âå·¥æ p (high ¬¨p) ‚àô = ‚ä•-elim (¬¨p p)
read-‚âå·¥æ p bullet ‚àô = ‚àô , ‚àô , Œµ-‚â° refl
read-‚âå·¥æ p (high ¬¨p) Here = ‚ä•-elim (¬¨p p)
read-‚âå·¥æ p (cons p' eq _) Here = _ , Here , eq
read-‚âå·¥æ p (high ¬¨p) (There r) = ‚ä•-elim (¬¨p p)
read-‚âå·¥æ p (cons p' _ eq‚ÇÅ) (There r‚ÇÅ) with read-‚âå·¥æ p eq‚ÇÅ r‚ÇÅ
... | t‚ÇÇ , r‚ÇÇ , eq‚ÇÇ = t‚ÇÇ , There r‚ÇÇ , eq‚ÇÇ

read-‚âà : ‚àÄ {ls l l‚Çê n} {t‚ÇÅ : Thread l} {ps‚ÇÅ ps‚ÇÇ : Pools ls} -> l ‚äë l‚Çê -> ps‚ÇÅ ‚âà·¥æ-‚ü® l‚Çê ‚ü© ps‚ÇÇ -> ps‚ÇÅ [ l ][ n ]= t‚ÇÅ -> ‚àÉ (Œª t‚ÇÇ -> ps‚ÇÇ [ l ][ n ]= t‚ÇÇ √ó t‚ÇÅ ‚âà-‚ü® l‚Çê ‚ü© t‚ÇÇ)
read-‚âà p (eq‚ÇÅ ‚à∑ _) (Here r‚ÇÅ) with read-‚âå·¥æ p eq‚ÇÅ r‚ÇÅ
... | t‚ÇÇ , r‚ÇÇ , eq‚ÇÇ = t‚ÇÇ , Here r‚ÇÇ , eq‚ÇÇ
read-‚âà p (_ ‚à∑ eq‚ÇÅ) (There r‚ÇÅ)  with read-‚âà p eq‚ÇÅ r‚ÇÅ
... | t‚ÇÇ , r‚ÇÇ , eq' = t‚ÇÇ , There r‚ÇÇ , eq'

-- Why do not we need the contstraint l ‚äë l‚Çê here?
readPool-‚âà : ‚àÄ {ls l l‚Çê n} {ps‚ÇÅ ps‚ÇÇ : Pools ls} {ts‚ÇÅ : Pool l n} -> ps‚ÇÅ ‚âà·¥æ-‚ü® l‚Çê ‚ü© ps‚ÇÇ -> ps‚ÇÅ [ l ]= ts‚ÇÅ ->
                   Œ£ (Pool l n) (Œª ts‚ÇÇ -> (ps‚ÇÇ [ l ]= ts‚ÇÇ) √ó (ts‚ÇÅ ‚âå·¥æ-‚ü® l‚Çê ‚ü© ts‚ÇÇ))
readPool-‚âà (ts‚ÇÅ‚âàts‚ÇÇ ‚à∑ eq) Here = _ , (Here , ts‚ÇÅ‚âàts‚ÇÇ)
readPool-‚âà (ts‚ÇÅ‚âàts‚ÇÇ ‚à∑ eq) (There r) with readPool-‚âà eq r
... | _ , r' , eq' = _ , (There r') , eq'

-- TODO USE CONSISTENT NAMES
--open import Concurrent.Security.Scheduler State _‚ü∂_‚Üë_ Œµ-state _‚âàÀ¢-‚ü®_‚ü©_ _‚âàÀ¢-‚ü®_~_~_‚ü©_

--------------------------------------------------------------------------------

data NI {ls} (l‚Çê : Label) (g‚ÇÅ' g‚ÇÇ : Global ls) : Set where
  isNI : ‚àÄ {g‚ÇÇ'} -> g‚ÇÅ' ‚Ü™‚ãÜ g‚ÇÇ' -> g‚ÇÇ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ' -> NI l‚Çê g‚ÇÅ' g‚ÇÇ

data _‚âà·µâ_ {l‚Çê : Label} {l} : Effect l -> Effect l -> Set where
  ‚àô : ‚àô ‚âà·µâ ‚àô
  ‚àÖ : ‚àÖ ‚âà·µâ ‚àÖ
  fork : ‚àÄ {h} {t‚ÇÅ t‚ÇÇ : Thread h} -> l ‚äë l‚Çê -> t‚ÇÅ ‚âà-‚ü® l‚Çê ‚ü© t‚ÇÇ -> fork t‚ÇÅ ‚âà·µâ fork t‚ÇÇ
  nv : ‚àÄ {e‚ÇÅ e‚ÇÇ} -> ¬¨ (l ‚äë l‚Çê) -> e‚ÇÅ ‚âà·µâ e‚ÇÇ
  
_‚âà·µâ-‚ü®_‚ü©_ : ‚àÄ {l} -> Effect l -> Label -> Effect l -> Set
e‚ÇÅ ‚âà·µâ-‚ü® l‚Çê ‚ü© e‚ÇÇ = _‚âà·µâ_ {l‚Çê} e‚ÇÅ e‚ÇÇ

‚âà·µâ-‚â° : ‚àÄ {l l‚Çê} {e‚ÇÅ e‚ÇÇ : Effect l} -> (x : Dec (l ‚äë l‚Çê)) -> e‚ÇÅ ‚âà·µâ-‚ü® l‚Çê ‚ü© e‚ÇÇ -> Œµ·µâ x e‚ÇÅ ‚â° Œµ·µâ x e‚ÇÇ
‚âà·µâ-‚â° (yes p) ‚àô = refl
‚âà·µâ-‚â° (yes p) ‚àÖ = refl
‚âà·µâ-‚â° (yes p) (fork x (Œµ-‚â° eq)) with eq
... | eq' rewrite eq' = refl
‚âà·µâ-‚â° (yes p) (nv x) = ‚ä•-elim (x p)
‚âà·µâ-‚â° (no ¬¨p) ‚àô = refl
‚âà·µâ-‚â° (no ¬¨p) ‚àÖ = refl
‚âà·µâ-‚â° (no ¬¨p) (fork x x‚ÇÅ) = refl
‚âà·µâ-‚â° (no ¬¨p) (nv x) = refl

‚â°-‚âà·µâ : ‚àÄ {l l‚Çê} {e‚ÇÅ e‚ÇÇ : Effect l} -> (x : Dec (l ‚äë l‚Çê)) -> Œµ·µâ x e‚ÇÅ ‚â° Œµ·µâ x e‚ÇÇ -> e‚ÇÅ ‚âà·µâ-‚ü® l‚Çê ‚ü© e‚ÇÇ
‚â°-‚âà·µâ {e‚ÇÅ = ‚àô} {‚àô} (yes p) eq = ‚àô
‚â°-‚âà·µâ {e‚ÇÅ = ‚àô} {‚àÖ} (yes p) ()
‚â°-‚âà·µâ {e‚ÇÅ = ‚àô} {fork x} (yes p) ()
‚â°-‚âà·µâ {e‚ÇÅ = ‚àÖ} {‚àô} (yes p) () 
‚â°-‚âà·µâ {e‚ÇÅ = ‚àÖ} {‚àÖ} (yes p) refl = ‚àÖ
‚â°-‚âà·µâ {e‚ÇÅ = ‚àÖ} {fork x} (yes p) ()
‚â°-‚âà·µâ {e‚ÇÅ = fork x} {‚àô} (yes p) ()
‚â°-‚âà·µâ {e‚ÇÅ = fork x} {‚àÖ} (yes p) ()
‚â°-‚âà·µâ {e‚ÇÅ = fork x} {fork x‚ÇÅ} (yes p) eq = {!!} -- TODO if we know p‚ÇÅ ‚âà p‚ÇÇ we can conclude that the type is actually the same
‚â°-‚âà·µâ (no ¬¨p) refl = nv ¬¨p

-- TODO maybe we don't need this
postulate same-event : ‚àÄ {ls l l‚Çê e‚ÇÅ e‚ÇÇ} {p‚ÇÅ p‚ÇÇ p‚ÇÅ' p‚ÇÇ' : Program ls (Mac l _)} -> l ‚äë l‚Çê -> p‚ÇÅ ‚âà·µñ-‚ü® l‚Çê ‚ü© p‚ÇÇ -> p‚ÇÅ ‚üº p‚ÇÇ ‚Üë e‚ÇÅ -> p‚ÇÅ' ‚üº p‚ÇÇ' ‚Üë e‚ÇÇ -> e‚ÇÅ ‚âà·µâ-‚ü® l‚Çê ‚ü© e‚ÇÇ

-- At the moment I am assuming that the scheduler state contains only valid thread id, that is
-- Ideally it should be: if the scheduler s‚ÇÅ ‚ü∂ s‚ÇÇ ‚Üë (l , n , e) and g‚ÇÅ = ‚ü® s‚ÇÅ , Œ£‚ÇÅ , ps‚ÇÅ ‚ü© then there is a thread at ps‚ÇÅ [ l ][ n ],
-- however due to the mutual dependency we cannot retrieve s‚ÇÅ ‚ü∂ s‚ÇÇ ‚Üë _ if we don't know the event e already.
-- postulate getScheduledThread : ‚àÄ {ls l n s‚ÇÇ e} (g‚ÇÅ : Global ls) -> let ‚ü® s‚ÇÅ , Œ£‚ÇÅ , ps‚ÇÅ ‚ü© = g‚ÇÅ in s‚ÇÅ ‚ü∂ s‚ÇÇ ‚Üë ‚ü™ l , n , e ‚ü´ -> ‚àÉ (Œª t -> ps‚ÇÅ [ l ][ n ]= t)
postulate getThread : ‚àÄ {ls} (l : Label) (n : ‚Ñï) (ps : Pools ls) -> ‚àÉ (Œª t -> ps [ l ][ n ]= t)

-- When a thread is forked we can find the corresponding thread pool.
postulate getPoolThread : ‚àÄ {ls} (l : Label) (ps : Pools ls) -> ‚àÉ (Œª n -> Œ£ (Pool l n) (Œª ts -> ps [ l ]= ts))

--------------------------------------------------------------------------------

-- Essentially we rule out ‚àô steps.
data Valid {ls} (g : Global ls) : Set where
  isValid : (‚àÄ {l n t} -> (pools g) [ l ][ n ]= t -> t ‚â¢ ‚àô) -> Valid g

-- In order to actually prove this we need the stronger condition ps [ l ][ n ]= t ‚àß ‚Ä¢ ‚àâ t
postulate stepValid : ‚àÄ {ls l n} {g‚ÇÅ g‚ÇÇ : Global ls} {{ v‚ÇÅ : Valid g‚ÇÅ }} -> l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> Valid g‚ÇÇ

stepValid‚ãÜ : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} -> g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÇ -> Valid g‚ÇÇ
stepValid‚ãÜ {{v‚ÇÅ}} [] = v‚ÇÅ
stepValid‚ãÜ {{v‚ÇÅ}} (s ‚à∑ ss) = stepValid‚ãÜ {{ stepValid s }} ss


-- fork? never produces a ‚Ä¢ event
fork?‚â†‚àô : ‚àÄ {l h n} {t ∞ :  Thread h} {p : l ‚äë h} -> fork? p t ∞ n ‚â¢ ‚àô
fork?‚â†‚àô {t ∞ = t} {p} with is‚àô? t
... | yes _ = Œª ()
... | no _ = Œª ()

-- Only ‚àô triggers the event ‚Ä¢
‚àô‚Üë‚àô : ‚àÄ {ls l n} {g‚ÇÅ g‚ÇÇ : Global ls} -> Valid g‚ÇÅ -> (s : l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> getEvent s ‚â¢ ‚àô
‚àô‚Üë‚àô v (step x x‚ÇÅ x‚ÇÇ x‚ÇÉ) ()
‚àô‚Üë‚àô v (fork x x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ x‚ÇÖ) eq = ‚ä•-elim (fork?‚â†‚àô eq)
‚àô‚Üë‚àô (isValid f) (hole r (bullet s) x‚ÇÇ) refl = ‚ä•-elim (f r refl)
‚àô‚Üë‚àô v (skip x x‚ÇÅ x‚ÇÇ) ()
‚àô‚Üë‚àô v (exit x x‚ÇÅ x‚ÇÇ) ()

-- TODO move to semantics module?
-- If we can read from a pool, then we can write something to it
postulate writePool : ‚àÄ {l n ls t‚ÇÅ t‚ÇÇ} {ps‚ÇÅ : Pools ls} -> ps‚ÇÅ [ l ][ n ]= t‚ÇÅ -> ‚àÉ (Œª ps‚ÇÇ -> ps‚ÇÇ ‚Üê ps‚ÇÅ [ l ][ n ]‚âî t‚ÇÇ)
postulate forkPool : ‚àÄ {h n ls} {ps‚ÇÅ : Pools ls} {ts : Pool h n} -> ps‚ÇÅ [ h ]= ts -> (t : Thread h) -> ‚àÉ (Œª ps‚ÇÇ -> ps‚ÇÇ ‚Üê ps‚ÇÅ [ h ]‚âî (ts ‚ñª t))
-- TODO could be proved by showing that forking preserves the validity of old references, that is
-- ps [ l ][ n ]= t, ps' ‚Üê ps [ h ] = ts ‚ñª t' => ps [ l ][ n ]= t
postulate writeAfterFork : ‚àÄ {l h n n' ls t‚ÇÅ t‚ÇÇ} {ps‚ÇÅ ps‚ÇÇ : Pools ls} (ts : Pool h n')
                             -> ps‚ÇÅ [ l ][ n ]= t‚ÇÅ -> ps‚ÇÇ ‚Üê ps‚ÇÅ [ h ]‚âî ts -> ‚àÉ (Œª ps‚ÇÉ -> ps‚ÇÉ ‚Üê ps‚ÇÇ [ l ][ n ]‚âî t‚ÇÇ)

square : ‚àÄ {l n e ls s‚ÇÇ' l‚Çê} {g‚ÇÅ g‚ÇÇ g‚ÇÅ' : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} -> l ‚äë l‚Çê ->
                                let ‚ü® s‚ÇÅ , Œ£‚ÇÅ , ps‚ÇÅ ‚ü© = g‚ÇÅ
                                    ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü© = g‚ÇÅ'
                                    ‚ü® s‚ÇÇ , Œ£‚ÇÇ , ps‚ÇÇ  ‚ü© = g‚ÇÇ
                                    m = ‚ü™ l , n , e ‚ü´ in s‚ÇÅ' ‚ü∂ s‚ÇÇ' ‚Üë m -> g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÅ' -> m ‚ä¢·¥π g‚ÇÅ ‚Ü™ g‚ÇÇ ->
                                ‚àÉ (Œª Œ£‚ÇÇ' -> (‚àÉ (Œª ps‚ÇÇ' ->
                                  let g‚ÇÇ' = ‚ü® s‚ÇÇ' , Œ£‚ÇÇ' , ps‚ÇÇ' ‚ü© in (l , n ‚ä¢ g‚ÇÅ' ‚Ü™ g‚ÇÇ'))))
square p sc' ‚ü® s‚ÇÅ‚âàs‚ÇÅ' , Œ£‚ÇÅ‚âàŒ£‚ÇÅ' , ps‚âàps‚ÇÅ' ‚ü© (withMsg (step r (none ¬¨fork ¬¨‚àô s) sc w)) with read-‚âà p ps‚âàps‚ÇÅ' r
... | t‚ÇÅ' , r' , t‚ÇÅ‚âàt‚ÇÅ' with redex·¥∏ p s (Œµ·µñ-‚â° Œ£‚ÇÅ‚âàŒ£‚ÇÅ' t‚ÇÅ‚âàt‚ÇÅ')
... | Step s' with writePool r'
... | ps‚ÇÇ' , w' = _ , ps‚ÇÇ' , step r' (none (isNotFork·¥∏ p ¬¨fork t‚ÇÅ‚âàt‚ÇÅ') (isNot‚àô·¥∏ p ¬¨‚àô t‚ÇÅ‚âàt‚ÇÅ') s') sc' w'
square p sc'  ‚ü® s‚ÇÅ‚âàs‚ÇÅ' , Œ£‚ÇÅ‚âàŒ£‚ÇÅ' , ps‚âàps‚ÇÅ' ‚ü© (withMsg (fork r‚ÇÅ r‚ÇÇ (fork p' t‚ÇÅ s) sc w‚ÇÅ w‚ÇÇ))  with read-‚âà p ps‚âàps‚ÇÅ' r‚ÇÅ
... | t‚ÇÅ' , r‚ÇÅ' , t‚ÇÅ‚âàt‚ÇÅ' with redex·¥∏ p s (Œµ·µñ-‚â° Œ£‚ÇÅ‚âàŒ£‚ÇÅ' t‚ÇÅ‚âàt‚ÇÅ')  -- Here by pattern matching on the equivalence proof I would learn that t‚ÇÅ' is also fork
... | Step s' with readPool-‚âà ps‚âàps‚ÇÅ' r‚ÇÇ
... | ts‚ÇÅ' , r‚ÇÇ' , ts‚ÇÅ‚âàts‚ÇÅ' with forkPool r‚ÇÇ' t‚ÇÅ
... | ps‚ÇÇ' , w‚ÇÅ' with writeAfterFork (ts‚ÇÅ' ‚ñª {!!})  r‚ÇÅ' w‚ÇÅ' -- We should get the forked thread from the l-equivalence proof
... | ps‚ÇÉ' , w‚ÇÇ' = {!!} , {!!} , {!fork r‚ÇÅ' r‚ÇÇ' (fork ? ? ?) sc' w‚ÇÅ' w‚ÇÇ'!}
square {{isValid ¬¨‚àô}} p sc' ‚ü® s‚ÇÅ‚âàs‚ÇÅ' , Œ£‚ÇÅ‚âàŒ£‚ÇÅ' , ps‚ÇÅ‚âàps‚ÇÅ' ‚ü© (withMsg (hole r (bullet (Pure Hole)) sc)) = ‚ä•-elim (¬¨‚àô r refl)
square p sc' ‚ü® s‚ÇÅ‚âàs‚ÇÅ' , Œ£‚ÇÅ‚âàŒ£‚ÇÅ' , ps‚ÇÅ‚âàps‚ÇÅ' ‚ü© (withMsg (skip r isS sc)) with read-‚âà p ps‚ÇÅ‚âàps‚ÇÅ' r
... | t‚ÇÅ' , r' , t‚ÇÅ‚âàt‚ÇÅ' = _ , _ , skip r' (stuck·¥∏ p (Œµ·µñ-‚â° Œ£‚ÇÅ‚âàŒ£‚ÇÅ' t‚ÇÅ‚âàt‚ÇÅ') isS) sc'
square p sc' ‚ü® s‚ÇÅ‚âàs‚ÇÅ' , Œ£‚ÇÅ‚âàŒ£‚ÇÅ' , ps‚ÇÅ‚âàps‚ÇÅ' ‚ü© (withMsg (exit r isV sc)) with read-‚âà p ps‚ÇÅ‚âàps‚ÇÅ' r
... | t‚ÇÅ' , r' , t‚ÇÅ‚âàt‚ÇÅ' = _ , _ , exit r' (value·¥∏ p isV t‚ÇÅ‚âàt‚ÇÅ') sc'

module PS
    (highÀ¢ : ‚àÄ {s‚ÇÅ s‚ÇÅ' s‚ÇÇ l l‚Çê n e i j} -> l ‚äë l‚Çê -> s‚ÇÅ ‚ü∂ s‚ÇÇ ‚Üë ‚ü™ l , n , e ‚ü´ -> e ‚â¢ ‚àô -> s‚ÇÅ ‚âàÀ¢-‚ü® i ~ l‚Çê ~ suc j ‚ü© s‚ÇÅ' ->
                    ‚àÉ Œª h -> ‚àÉ Œª n -> (e' : Event h) -> e' ‚â¢ ‚àô -> HighStep l‚Çê h n e' s‚ÇÅ s‚ÇÇ s‚ÇÅ' i j)
     (aligned : ‚àÄ {l l‚Çê n i e s‚ÇÅ s‚ÇÇ s‚ÇÅ'} -> l ‚äë l‚Çê -> s‚ÇÅ ‚ü∂ s‚ÇÇ ‚Üë ‚ü™ l , n , e ‚ü´ -> e ‚â¢ ‚àô -> s‚ÇÅ ‚âàÀ¢-‚ü® i ~ l‚Çê ~ 0 ‚ü© s‚ÇÅ' -> Aligned s‚ÇÅ s‚ÇÇ s‚ÇÅ' ‚ü™ l , n , e ‚ü´ l‚Çê)
  where

    low-step : ‚àÄ {l n l‚Çê n‚ÇÅ n‚ÇÇ ls} {g‚ÇÅ g‚ÇÇ g‚ÇÅ' : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} {{v‚ÇÅ' : Valid g‚ÇÅ'}} -> l ‚äë l‚Çê ->
                 (s : l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> (state g‚ÇÅ) ‚âàÀ¢-‚ü® n‚ÇÅ ~ l‚Çê ~ n‚ÇÇ ‚ü© (state g‚ÇÅ') -> g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÅ' -> NI l‚Çê g‚ÇÅ' g‚ÇÇ
    low-step {l‚Çê = l‚Çê} {n‚ÇÇ = zero} {{v‚ÇÅ}} p gs eq‚ÇÅ eq‚ÇÇ with aligned p (getSchedulerStep gs) (‚àô‚Üë‚àô v‚ÇÅ gs) eq‚ÇÅ
    ... | low sc' eq‚ÇÅ' with square p sc' eq‚ÇÇ (withMsg gs)
    ... | Œ£‚ÇÇ' , ps‚ÇÇ' , gs' = isNI (gs' ‚à∑ []) (simulation‚Ü™ {{l‚Çê}} eq‚ÇÇ gs gs')                        

    -- The other global configuration performs a high step
    low-step {n‚ÇÇ = suc n‚ÇÇ} {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ} {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü©} {{v‚ÇÅ}} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© with highÀ¢ p (getSchedulerStep gs) (‚àô‚Üë‚àô v‚ÇÅ gs) eq‚ÇÅ
    ... | h , n , k with getThread h n ps‚ÇÅ'
    ... | t' , r' with programStatus Œ£‚ÇÅ' t'

    -- Done Event
    low-step {n‚ÇÇ = suc n‚ÇÇ} {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü©} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | t' , r' | V isV with k Done (Œª ())
    ... | high ¬¨p sc' eq‚ÇÅ' with low-step {{ v‚ÇÅ' = stepValid (exit r' isV sc') }} p gs eq‚ÇÅ' ‚ü® forget eq‚ÇÅ' , b , c ‚ü©
    ... | isNI ss eq‚ÇÇ' = isNI ((exit r' isV sc') ‚à∑ ss) eq‚ÇÇ'
    
    low-step {n‚ÇÇ = suc n‚ÇÇ} {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü©} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | t' , r' | R (Step st) with effectOf t' | stepWithEvent st

    -- Hole Event (absurd)
    low-step {n‚ÇÇ = suc n‚ÇÇ} {{v‚ÇÅ' = isValid f}} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | .‚àô , r' | R (Step st) | ‚àô | bullet (Pure Hole) = ‚ä•-elim (f r' refl)

    -- Step Event
    low-step {n‚ÇÇ = suc n‚ÇÇ} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | t' , r' | R (Step st) | ‚àÖ | st' with k Step (Œª ())
    ... | high ¬¨p sc' eq‚ÇÅ' with writePool r'
    ... | ps‚ÇÇ' , w' with high-step ¬¨p (step r' st' sc' w')
    ... | eq'' with low-step {{ v‚ÇÅ' = stepValid (step r' st' sc' w') }} p gs eq‚ÇÅ' (trans-‚âà·µç ‚ü® a , b , c ‚ü© eq'')
    ... | isNI {g‚ÇÇ'} ss eq‚ÇÇ' = isNI (step r' st' sc' w' ‚à∑ ss) eq‚ÇÇ'

    -- Fork Event
    -- TODO here we need to assume that the label of the forked thread is in the pool.
    -- Then we can compute n ∞ as the length of the corresponding thread pool.
    low-step {n‚ÇÇ = suc n‚ÇÇ} {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü©} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | t' , r' | R (Step st) | fork {h‚Åø} t‚Åø | st'
      with getPoolThread h‚Åø ps‚ÇÅ'
    ... | n‚Åø , ts‚Åø , r‚Åø with k (fork? (fork-‚äë st') t‚Åø n‚Åø) fork?‚â†‚àô
    ... | high ¬¨p sc' eq‚ÇÅ' with forkPool r‚Åø t‚Åø
    ... | ps‚ÇÇ' , w' with writeAfterFork (ts‚Åø ‚ñª t‚Åø) r' w'
    ... | ps‚ÇÉ' , w'' with high-step ¬¨p (fork {l‚äëh = fork-‚äë st'} r' r‚Åø st' sc' w' w'')
    ... | eq'' with low-step {{ v‚ÇÅ' = stepValid (fork {l‚äëh = fork-‚äë st'} r' r‚Åø st' sc' w' w'') }} p gs eq‚ÇÅ' (trans-‚âà·µç ‚ü® a , b , c ‚ü© eq'')
    ... | isNI ss eq‚ÇÇ' = isNI (fork {l‚äëh = fork-‚äë st'} r' r‚Åø st' sc' w' w'' ‚à∑ ss) eq‚ÇÇ'

    -- NoStep Event
    low-step {n‚ÇÇ = suc n‚ÇÇ} {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü©} p gs eq‚ÇÅ ‚ü® a , b , c ‚ü© | h , n , k | t' , r' | S isS with k NoStep (Œª ())
    ... | high ¬¨p sc' eq‚ÇÅ' with low-step {{ v‚ÇÅ' = stepValid (skip r' isS sc') }}  p gs eq‚ÇÅ' ‚ü® forget eq‚ÇÅ' , b , c ‚ü©
    ... | isNI ss eq‚ÇÇ' = isNI (skip r' isS sc' ‚à∑ ss) eq‚ÇÇ'

    -- TODO maybe use NI data-type for clarity
    ps-ni-dispatch : ‚àÄ {l n ls l‚Çê} {g‚ÇÅ g‚ÇÅ' g‚ÇÇ : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} {{v‚ÇÅ' : Valid g‚ÇÅ'}} -> Dec (l ‚äë l‚Çê) ->
                          g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÅ' -> (s : l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ) -> ‚àÉ (Œª g‚ÇÇ' ‚Üí (g‚ÇÇ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ') √ó g‚ÇÅ' ‚Ü™‚ãÜ g‚ÇÇ' )
    ps-ni-dispatch {g‚ÇÅ' = ‚ü® s‚ÇÅ' , Œ£‚ÇÅ' , ps‚ÇÅ' ‚ü© } (yes p) ‚ü® eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ ‚ü© s with low-step p s (align eq‚ÇÅ) ‚ü® eq‚ÇÅ , eq‚ÇÇ , eq‚ÇÉ ‚ü©
    ... | isNI ss eq'  = _ Œ£., (eq' Œ£., ss)
    ps-ni-dispatch {g‚ÇÅ' = g‚ÇÅ'} (no ¬¨p) eq s = g‚ÇÅ' , trans-‚âà·µç (sym-‚âà·µç (high-step ¬¨p s)) eq , []

    -- TODO I will probably need to add the assumption ps [ l ][ n ] ‚â† ‚àô
    progress-sensitive-ni : ‚àÄ {l ls n} {g‚ÇÅ g‚ÇÅ' g‚ÇÇ : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} {{v‚ÇÅ' : Valid g‚ÇÅ'}}  -> (l‚Çê : Label) -> g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÅ' ->
                              l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> ‚àÉ (Œª g‚ÇÇ' ‚Üí (g‚ÇÇ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ') √ó g‚ÇÅ' ‚Ü™‚ãÜ g‚ÇÇ')
    progress-sensitive-ni {l} l‚Çê = ps-ni-dispatch (l ‚äë? l‚Çê)
    
    progress-sensitive-ni‚ãÜ : ‚àÄ {ls} {g‚ÇÅ g‚ÇÅ' g‚ÇÇ : Global ls} {{v‚ÇÅ : Valid g‚ÇÅ}} {{v‚ÇÅ' : Valid g‚ÇÅ'}} -> (l‚Çê : Label) ->
                                g‚ÇÅ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÅ' -> (ss : g‚ÇÅ ‚Ü™‚ãÜ g‚ÇÇ) -> ‚àÉ (Œª g‚ÇÇ' ‚Üí (g‚ÇÇ ‚âà·µç-‚ü® l‚Çê ‚ü© g‚ÇÇ') √ó g‚ÇÅ' ‚Ü™‚ãÜ g‚ÇÇ')
    progress-sensitive-ni‚ãÜ l‚Çê eq [] = _ , (eq , [])
    progress-sensitive-ni‚ãÜ {{v‚ÇÅ}} {{v‚ÇÅ'}} l‚Çê eq (s ‚à∑ ss) with progress-sensitive-ni l‚Çê eq s
    ... | g‚ÇÇ' , eq‚ÇÇ' , ss‚ÇÇ' with progress-sensitive-ni‚ãÜ {{ stepValid s }} {{ stepValid‚ãÜ ss‚ÇÇ' }} l‚Çê eq‚ÇÇ' ss
    ... | g‚ÇÉ' , eq‚ÇÉ' , ss‚ÇÉ' = g‚ÇÉ' , (eq‚ÇÉ' , ss‚ÇÇ' ++À¢ ss‚ÇÉ')
