open import Lattice
open import Scheduler using (Scheduler)

-- open import Concurrent.Communication
-- open import Relation.Binary.PropositionalEquality
--open import Concurrent.Security.Erasure hiding (ŒµÀ¢-‚â°)

module Concurrent.Security.Distributivity (ùìõ : Lattice) (ùì¢ : Scheduler ùìõ) where

open import Types ùìõ
open import Scheduler ùìõ

open Scheduler.Scheduler using (Œµ-sch-dist ; Œµ-sch-‚â°)

import Sequential.Calculus as S
open module S1 = S ùìõ

import Sequential.Semantics as S‚ÇÇ
open module S2 = S‚ÇÇ ùìõ

open import Sequential.Security ùìõ

import Sequential.Security.Erasure.Graph as SG
open module S3 = SG ùìõ

import Concurrent.Calculus
open module C = Concurrent.Calculus ùìõ ùì¢
open import Concurrent.Semantics ùìõ ùì¢
open import Concurrent.Security.Erasure.Base ùìõ ùì¢

open import Relation.Binary.PropositionalEquality

--------------------------------------------------------------------------------

Value-Œµ : ‚àÄ {œÑ l l‚Çê} {t : CTerm (Mac l œÑ)} -> (p : l ‚äë l‚Çê) -> IsValue (Œµ-Mac l‚Çê (yes p) t) -> IsValue t
Value-Œµ {œÑ} {l} {l‚Çê} {t = t} p isV = aux (Œµ-Mac-yes-ErasureIso (Mac·¥∏ p) p t) isV
  where aux : ‚àÄ {t t·µâ : CTerm (Mac l œÑ)} {nonS : Insensitive l‚Çê (Mac l œÑ)} -> ErasureIso nonS t t·µâ -> IsValue t·µâ -> IsValue t
        aux (SG.Mac p‚ÇÅ x) (S.Mac t‚ÇÅ) = S.Mac _
        aux (SG.Mac‚Çì p‚ÇÅ e‚ÇÅ) (S.Mac‚Çì e) = S.Mac‚Çì _


PRedex-Œµ-Iso : ‚àÄ {l‚Çê œÑ} {c c·µâ : CTerm œÑ} {nonS : Insensitive l‚Çê œÑ} -> ErasureIso nonS c c·µâ -> PRedex c·µâ -> PRedex c
PRedex-Œµ-Iso (SG.App nonS e‚ÇÅ e‚ÇÇ) (S‚ÇÇ.Step (S‚ÇÇ.AppL s)) with PRedex-Œµ-Iso e‚ÇÅ (Step s)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.AppL s')
PRedex-Œµ-Iso (SG.App nonS (SG.Abs x‚ÇÉ) x‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.Beta) = Step Beta
PRedex-Œµ-Iso (SG.Ite nonS e‚ÇÅ e‚ÇÇ e‚ÇÉ) (S‚ÇÇ.Step (S‚ÇÇ.IfCond x)) with PRedex-Œµ-Iso e‚ÇÅ (Step x)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.IfCond s')
PRedex-Œµ-Iso (SG.Ite nonS SG.True e‚ÇÇ e‚ÇÉ) (S‚ÇÇ.Step S‚ÇÇ.IfTrue) = S‚ÇÇ.Step S‚ÇÇ.IfTrue
PRedex-Œµ-Iso (SG.Ite nonS SG.False e‚ÇÇ e‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.IfFalse) = S‚ÇÇ.Step S‚ÇÇ.IfFalse
PRedex-Œµ-Iso (SG.unId nonS e) (S‚ÇÇ.Step (S‚ÇÇ.unIdCtx x)) with PRedex-Œµ-Iso e (Step x)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.unIdCtx s')
PRedex-Œµ-Iso (SG.unId nonS (SG.Id x)) (S‚ÇÇ.Step S‚ÇÇ.unId) = S‚ÇÇ.Step S‚ÇÇ.unId
PRedex-Œµ-Iso (e SG.<*>·¥µ e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÅ x‚ÇÇ)) with PRedex-Œµ-Iso e (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÅ s')
PRedex-Œµ-Iso (SG.Id (SG.Iso nonS e‚ÇÅ) SG.<*>·¥µ e‚ÇÇ) (S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÇ x‚ÇÇ)) with PRedex-Œµ-Iso e‚ÇÅ (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÇ s')
PRedex-Œµ-Iso (SG.Id (SG.Iso ._ (SG.Abs x‚ÇÇ)) SG.<*>·¥µ e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÉ x‚ÇÑ)) with PRedex-Œµ-Iso e‚ÇÅ (Step x‚ÇÑ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunIdCtx‚ÇÉ s')
PRedex-Œµ-Iso (SG.Id (SG.Iso ._ (SG.Abs x‚ÇÇ)) SG.<*>·¥µ SG.Id x‚ÇÉ) (S‚ÇÇ.Step S‚ÇÇ.appFunId) = S‚ÇÇ.Step S‚ÇÇ.appFunId
PRedex-Œµ-Iso (SG.Return p x) (S‚ÇÇ.Step S‚ÇÇ.Return) = S‚ÇÇ.Step S‚ÇÇ.Return
PRedex-Œµ-Iso (SG.Throw p e‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.Throw) = S‚ÇÇ.Step S‚ÇÇ.Throw
PRedex-Œµ-Iso (SG.Bind p (SG.Mac .p x) e‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.Bind) = S‚ÇÇ.Step S‚ÇÇ.Bind
PRedex-Œµ-Iso (SG.Bind p (SG.Mac‚Çì .p e‚ÇÅ) e‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.BindEx) = S‚ÇÇ.Step S‚ÇÇ.BindEx
PRedex-Œµ-Iso (SG.Catch p (SG.Mac .p x) e‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.Catch) = S‚ÇÇ.Step S‚ÇÇ.Catch
PRedex-Œµ-Iso (SG.Catch p (SG.Mac‚Çì .p e‚ÇÅ) e‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.CatchEx) = S‚ÇÇ.Step S‚ÇÇ.CatchEx
PRedex-Œµ-Iso (SG.label·¥∏ p‚ÇÅ p p‚ÇÉ x) (S‚ÇÇ.Step (S‚ÇÇ.label .p)) = S‚ÇÇ.Step (S‚ÇÇ.label p)
PRedex-Œµ-Iso (SG.label·¥¥ p‚ÇÅ p p‚ÇÉ x) (S‚ÇÇ.Step (S‚ÇÇ.label‚àô .p)) = S‚ÇÇ.Step (S‚ÇÇ.label p)
PRedex-Œµ-Iso (SG.label‚àô p‚ÇÅ p x) (S‚ÇÇ.Step (S‚ÇÇ.label‚àô .p)) = S‚ÇÇ.Step (label‚àô p)
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Iso nonS x)) (S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÅ .p x‚ÇÅ)) with PRedex-Œµ-Iso x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÅ p s')
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÅ .p x‚ÇÅ)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÅ))
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Iso .(SG.Res·¥∏ p‚ÇÇ) (SG.Res p‚ÇÇ (SG.Iso nonS x)))) (S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÇ .p x‚ÇÅ))
  with PRedex-Œµ-Iso x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÇ p s')
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.unlabelCtx‚ÇÇ .p x‚ÇÅ)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÅ))
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Iso .(SG.Res·¥∏ p‚ÇÇ) (SG.Res p‚ÇÇ (SG.Iso ._ (SG.Id x))))) (S‚ÇÇ.Step (S‚ÇÇ.unlabel .p)) = S‚ÇÇ.Step (S‚ÇÇ.unlabel p)
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Res‚àô ¬¨p ())) (S‚ÇÇ.Step (S‚ÇÇ.unlabel .p))
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Iso .(SG.Res·¥∏ p‚ÇÇ) (SG.Res‚Çì p‚ÇÇ x))) (S‚ÇÇ.Step (S‚ÇÇ.unlabelEx .p)) = S‚ÇÇ.Step (S‚ÇÇ.unlabelEx p)
PRedex-Œµ-Iso (SG.unlabel p‚ÇÅ p (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.unlabelEx .p)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÅ))
PRedex-Œµ-Iso (SG.Star p e e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÅ x‚ÇÇ)) with PRedex-Œµ-Iso e (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÅ s')
PRedex-Œµ-Iso (SG.Star p (SG.Res .p (SG.Iso nonS x‚ÇÅ)) e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Iso e‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ s')
PRedex-Œµ-Iso (SG.Star p (SG.Res‚Çì .p e‚ÇÅ) e‚ÇÇ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ‚Çì x‚ÇÉ)) with PRedex-Œµ-Iso e‚ÇÇ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ‚Çì s')
PRedex-Œµ-Iso (SG.Star p (SG.Res .p x‚ÇÅ) (SG.Res .p x‚ÇÇ)) (S‚ÇÇ.Step S‚ÇÇ.appFun) = S‚ÇÇ.Step S‚ÇÇ.appFun
PRedex-Œµ-Iso (SG.Star p (SG.Res‚Çì .p e‚ÇÅ) (SG.Res .p x‚ÇÅ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚Çì
PRedex-Œµ-Iso (SG.Star p (SG.Res .p x) (SG.Res‚Çì .p e‚ÇÇ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÇ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÇ‚Çì
PRedex-Œµ-Iso (SG.Star p (SG.Res‚Çì .p e) (SG.Res‚Çì .p e‚ÇÉ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚ÇÇ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚ÇÇ‚Çì
PRedex-Œµ-Iso (SG.Star‚àô p e e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÅ x‚ÇÇ)) with PRedex-Œµ-Iso e (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÅ s')
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res .p x‚ÇÅ) e‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Iso e‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ s')
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res‚Çì .p e‚ÇÅ) e‚ÇÇ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ‚Çì x‚ÇÉ)) with PRedex-Œµ-Iso e‚ÇÇ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ‚Çì s')
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res .p x‚ÇÅ) (SG.Res .p x‚ÇÇ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = Step appFun‚àô
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res‚Çì .p e‚ÇÅ) (SG.Res .p x‚ÇÅ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚Çì
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res .p x) (SG.Res‚Çì .p e‚ÇÇ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì
PRedex-Œµ-Iso (SG.Star‚àô p (SG.Res‚Çì .p e) (SG.Res‚Çì .p e‚ÇÉ)) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚ÇÇ‚Çì) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚ÇÇ‚Çì
PRedex-Œµ-Iso (SG.‚àô nonS) (S‚ÇÇ.Step S‚ÇÇ.Hole) = Step Hole
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Iso nonS x)) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx .p x‚ÇÅ)) with PRedex-Œµ-Iso x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.relabelCtx p s')
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx .p x‚ÇÅ)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÇ))
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabel .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabel p)
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.relabel .p)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÇ))
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res‚Çì p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabelEx p)
PRedex-Œµ-Iso (SG.relabel p p‚ÇÇ (SG.Res‚àô ¬¨p ())) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx .p))
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Iso nonS x)) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô .p x‚ÇÅ)) with PRedex-Œµ-Iso x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô p s')
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô .p x‚ÇÅ)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÇ))
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = Step (relabel‚àô p)
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÇ))
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res‚Çì p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p)) = S‚ÇÇ.Step (relabelEx‚àô p)
PRedex-Œµ-Iso (SG.relabel‚àô p p‚ÇÇ (SG.Res‚àô ¬¨p x)) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p)) = ‚ä•-elim (¬¨p (trans-‚äë p p‚ÇÇ))

PRedex-Œµ-Res : ‚àÄ {l l‚Çê œÑ} {c c·µâ : CTerm (Res l œÑ)} -> Erasure l‚Çê c c·µâ -> PRedex c·µâ -> PRedex c

PRedex-Œµ-Res‚àô : ‚àÄ {h l‚Çê œÑ} {c c·µâ : CTerm (Res h œÑ)} -> (¬¨p : ¬¨ (h ‚äë l‚Çê)) -> ErasureRes‚àô ¬¨p c c·µâ -> PRedex c·µâ -> PRedex c
PRedex-Œµ-Res‚àô ¬¨p (SG.Var p) (S‚ÇÇ.Step ())
PRedex-Œµ-Res‚àô ¬¨p (SG.App x x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.AppL x‚ÇÇ)) with PRedex-Œµ-Iso x (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.AppL s')
PRedex-Œµ-Res‚àô ¬¨p (SG.App (SG.Abs x‚ÇÇ) x‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.Beta) = S‚ÇÇ.Step S‚ÇÇ.Beta
PRedex-Œµ-Res‚àô ¬¨p (SG.Ite x x‚ÇÅ x‚ÇÇ) (S‚ÇÇ.Step (S‚ÇÇ.IfCond x‚ÇÉ)) with PRedex-Œµ-Iso x (S‚ÇÇ.Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.IfCond s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Ite SG.True x‚ÇÅ x‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.IfTrue) = S‚ÇÇ.Step S‚ÇÇ.IfTrue
PRedex-Œµ-Res‚àô ¬¨p (SG.Ite SG.False x‚ÇÅ x‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.IfFalse) = S‚ÇÇ.Step S‚ÇÇ.IfFalse
PRedex-Œµ-Res‚àô ¬¨p (SG.unId x) (S‚ÇÇ.Step (S‚ÇÇ.unIdCtx x‚ÇÅ)) with PRedex-Œµ-Iso x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.unIdCtx s')
PRedex-Œµ-Res‚àô ¬¨p (SG.unId (SG.Id x)) (S‚ÇÇ.Step S‚ÇÇ.unId) = S‚ÇÇ.Step S‚ÇÇ.unId
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ x x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÅ x‚ÇÇ)) with PRedex-Œµ-Res‚àô ¬¨p x (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÅ s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Res‚àô ¬¨p x‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res‚Çì x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Res‚àô ¬¨p x‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚ÇÇ‚Çì s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ () x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ‚Çì x‚ÇÉ)) 
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res SG.Res) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res SG.Res‚Çì) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÇ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res‚Çì SG.Res) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res‚Çì SG.Res‚Çì) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚ÇÅ‚ÇÇ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ () x‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res ()) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ SG.Res‚Çì ()) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star·¥¥ () x‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô x x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÅ x‚ÇÇ)) with PRedex-Œµ-Res‚àô ¬¨p x (Step x‚ÇÇ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÅ s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Res‚àô ¬¨p x‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ s')
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res‚Çì x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ x‚ÇÉ)) with PRedex-Œµ-Res‚àô ¬¨p x‚ÇÅ (Step x‚ÇÉ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ‚Çì s') 
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô () x‚ÇÅ) (S‚ÇÇ.Step (S‚ÇÇ.appFunCtx‚àô‚ÇÇ‚Çì x‚ÇÉ))
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res SG.Res) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step appFun‚àô
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res SG.Res‚Çì) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res‚Çì SG.Res) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res‚Çì SG.Res‚Çì) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô) = S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚ÇÇ‚Çì
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô () x‚ÇÇ) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res ()) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô SG.Res‚Çì ()) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p (SG.Star‚àô () x‚ÇÅ) (S‚ÇÇ.Step S‚ÇÇ.appFun‚àô‚ÇÅ‚ÇÇ‚Çì)
PRedex-Œµ-Res‚àô ¬¨p SG.Res (S‚ÇÇ.Step ())
PRedex-Œµ-Res‚àô ¬¨p SG.Res‚Çì (S‚ÇÇ.Step ())
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p x) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô .p s)) with PRedex-Œµ-Res x (Step s)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.relabelCtx p s')
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabel p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p (SG.Res‚àô ¬¨p‚ÇÅ SG.Res)) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabel p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p (SG.Res‚àô ¬¨p‚ÇÅ SG.Res‚Çì)) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabelEx p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res‚Çì p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p)) = S‚ÇÇ.Step (S‚ÇÇ.relabelEx p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel p (SG.Res‚àô ¬¨p‚ÇÅ ())) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p))
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p x) (S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô .p x‚ÇÅ)) with PRedex-Œµ-Res x (Step x‚ÇÅ)
... | Step s' = S‚ÇÇ.Step (S‚ÇÇ.relabelCtx‚àô p s')
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (relabel‚àô p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p (SG.Res‚àô ¬¨p‚ÇÅ SG.Res)) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (relabel‚àô p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p (SG.Res‚àô ¬¨p‚ÇÅ SG.Res‚Çì)) (S‚ÇÇ.Step (S‚ÇÇ.relabel‚àô .p)) = S‚ÇÇ.Step (relabelEx‚àô p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p (SG.Iso .(SG.Res·¥∏ p‚ÇÅ) (SG.Res‚Çì p‚ÇÅ x))) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p)) = S‚ÇÇ.Step (relabelEx‚àô p)
PRedex-Œµ-Res‚àô ¬¨p (SG.relabel‚àô p (SG.Res‚àô ¬¨p‚ÇÅ ())) (S‚ÇÇ.Step (S‚ÇÇ.relabelEx‚àô .p))
PRedex-Œµ-Res‚àô ¬¨p SG.‚àô (S‚ÇÇ.Step S‚ÇÇ.Hole) = S‚ÇÇ.Step Hole

PRedex-Œµ-Res (SG.Iso nonS x) p = PRedex-Œµ-Iso x p
PRedex-Œµ-Res (SG.Res‚àô ¬¨p x) p = PRedex-Œµ-Res‚àô ¬¨p x p

-- TODO: Change name from write-... to ref-....  (we are actually bulding references)

write-memory : ‚àÄ {l‚Çê l s œÑ} (p : l ‚äë l‚Çê) {m m·µâ : Memory l} {t t·µâ : CTerm Nat} ->
                ErasureMemory (yes p) m m·µâ -> Erasure l‚Çê t t·µâ -> TypedIx œÑ s t·µâ m·µâ -> TypedIx œÑ s t m
write-memory p (SG.Iso .p (x SG.‚à∑ x‚ÇÅ)) (SG.Iso .SG.Nat SG.zero) S.Here = Here
write-memory p (SG.Iso .p (x‚ÇÇ SG.‚à∑ x‚ÇÅ)) (SG.Iso .SG.Nat (SG.suc x)) (S.There r) = There (write-memory p (SG.Iso p x‚ÇÅ) (SG.Iso SG.Nat x) r)
write-memory p (SG.Iso .p SG.‚àô) (SG.Iso nonS x‚ÇÅ) S.‚àô = ‚àô                


write-store : ‚àÄ {l‚Çê l ls s œÑ} (p : l ‚äë l‚Çê) (q : l ‚àà ls) {Œ£ Œ£·µâ : Store ls} {t t·µâ : CTerm Nat} ->
                ErasureStore l‚Çê Œ£ Œ£·µâ -> Erasure l‚Çê t t·µâ -> TypedIx œÑ s t·µâ (getMemory q Œ£·µâ) -> TypedIx œÑ s t (getMemory q Œ£)
write-store p Here (SG._‚à∑_ {x = yes p‚ÇÅ} m‚ÇÅ x) n r =  write-memory p‚ÇÅ m‚ÇÅ n r
write-store p Here (SG._‚à∑_ {x = no ¬¨p} m‚ÇÅ x) _ r = ‚ä•-elim (¬¨p p)
write-store p (There q) {Œ£ = m ‚à∑ Œ£} {Œ£·µâ = m·µâ ‚à∑ Œ£·µâ} (x‚ÇÅ SG.‚à∑ x‚ÇÇ) n r = write-store p q x‚ÇÇ n r

writeEx-memory : ‚àÄ {œÑ n l l‚Çê} {m m·µâ : Memory l} (p : l ‚äë l‚Çê) -> ErasureMemory (yes p) m m·µâ -> TypedIx œÑ F n m·µâ -> TypedIx œÑ F n m
writeEx-memory p (SG.Iso .p (x‚ÇÅ SG.‚à∑ x)) S.Here = S.Here
writeEx-memory p (SG.Iso .p (x‚ÇÅ SG.‚à∑ x)) (S.There r) = S.There (writeEx-memory p (SG.Iso p x) r)
writeEx-memory p (SG.Iso .p SG.‚àô) S.‚àô = S.‚àô

writeEx-store : ‚àÄ {œÑ n l l‚Çê ls} {Œ£ Œ£·µâ : Store ls} -> (p : l ‚äë l‚Çê) (q : l ‚àà ls) -> ErasureStore l‚Çê Œ£ Œ£·µâ ->
        TypedIx œÑ F n (getMemory q Œ£·µâ) -> TypedIx œÑ F n (getMemory q Œ£)
writeEx-store p Here (SG.Iso p‚ÇÅ x SG.‚à∑ x‚ÇÇ) r = writeEx-memory p‚ÇÅ (SG.Iso p‚ÇÅ x) r
writeEx-store p Here (SG.‚àô {¬¨p = ¬¨p} SG.‚à∑ x‚ÇÇ) r = ‚ä•-elim (¬¨p p)
writeEx-store p (There q) (x‚ÇÅ SG.‚à∑ x‚ÇÇ) r = writeEx-store p q x‚ÇÇ r

Redex-Œµ : ‚àÄ {œÑ l l‚Çê ls} {t : CTerm (Mac l œÑ)} {Œ£ : Store ls} -> (p : l ‚äë l‚Çê) -> Redex (ŒµÀ¢ l‚Çê Œ£) (Œµ-Mac l‚Çê (yes p) t) -> Redex Œ£ t
Redex-Œµ {œÑ} {l} {l‚Çê} {ls} {t} {Œ£} p isR = aux (Œµ-Mac-yes-ErasureIso (SG.Mac·¥∏ p) p t) (ŒµÀ¢-ErasureStore Œ£) isR
  where aux : ‚àÄ {œÑ} {Œ£ Œ£·µâ : Store ls} {t t·µâ : CTerm (Mac l œÑ)} {nonS : Insensitive l‚Çê (Mac l œÑ)} ->
                ErasureIso nonS t t·µâ -> ErasureStore l‚Çê Œ£ Œ£·µâ -> Redex Œ£·µâ t·µâ -> Redex Œ£ t
        aux e·µó eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.Pure x)) with PRedex-Œµ-Iso e·µó (S‚ÇÇ.Step x)
        ... | Step s = S‚ÇÇ.Step (Pure s)
        aux (SG.Bind p‚ÇÅ e·µó e·µó‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.BindCtx x)) with aux e·µó eÀ¢ (Step x)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.BindCtx s)
        aux (SG.Catch p‚ÇÅ e·µó e·µó‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.CatchCtx x)) with aux e·µó eÀ¢ (Step x)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.CatchCtx s)
        aux (SG.join·¥∏ p‚ÇÅ p‚ÇÇ p‚ÇÉ e·µó) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.join .p‚ÇÇ x)) = {!!} -- Rule out join with Valid in concurrent
        aux e·µó eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.joinEx p‚ÇÅ x)) = {!!} -- Rule out join with Valid in concurrent
        aux e·µó eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.join‚àô p‚ÇÅ)) = {!!} -- Rule out join with Valid in concurrent
        aux (SG.new p‚ÇÅ p‚ÇÇ x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.new .p‚ÇÇ q)) = Step (new p‚ÇÇ q)
        aux (SG.write p‚ÇÅ p‚ÇÇ x x‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.writeCtx .p‚ÇÇ (S‚ÇÇ.Pure x‚ÇÇ))) with PRedex-Œµ-Res x (Step x‚ÇÇ)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.writeCtx p‚ÇÇ (S‚ÇÇ.Pure s))
        aux (SG.write p‚ÇÅ p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÉ) (SG.Res p‚ÇÉ x)) x‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.write .p‚ÇÇ q r‚ÇÅ)) = S‚ÇÇ.Step (write p‚ÇÇ q (write-store p‚ÇÉ q eÀ¢ x r‚ÇÅ))
        aux (SG.write p‚ÇÅ p‚ÇÇ (SG.Res‚àô ¬¨p SG.Res) x‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.write .p‚ÇÇ q r‚ÇÅ)) = {!!} -- I have to assume that Res ‚àô was originally Res n a valid index
        aux (SG.write p‚ÇÅ p‚ÇÇ (SG.Res‚àô ¬¨p SG.Res‚Çì) x‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.write .p‚ÇÇ q r‚ÇÅ)) = S‚ÇÇ.Step (writeEx p‚ÇÇ q {!r‚ÇÅ!}) -- I have to assume that Res ‚àô was originally Res n a valid index
        aux (SG.write p‚ÇÅ p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÉ) (SG.Res‚Çì p‚ÇÉ x)) x‚ÇÅ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.writeEx .p‚ÇÇ q r‚ÇÅ)) = Step (writeEx p‚ÇÇ q (writeEx-store p‚ÇÉ q eÀ¢ r‚ÇÅ))
        aux (SG.write p‚ÇÅ p‚ÇÇ (SG.Res‚àô ¬¨p ()) x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.writeEx .p‚ÇÇ q r‚ÇÅ))
        aux (SG.read p‚ÇÅ p‚ÇÇ x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.readCtx .p‚ÇÇ (Pure x‚ÇÅ))) with PRedex-Œµ-Res x (Step x‚ÇÅ)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.readCtx p‚ÇÇ (S‚ÇÇ.Pure s))
        aux (SG.read p‚ÇÅ p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÉ) (SG.Res p‚ÇÉ x))) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.read .p‚ÇÇ q r)) = S‚ÇÇ.Step (read p‚ÇÇ q (write-store p‚ÇÉ q eÀ¢ x r))
        aux (SG.read p‚ÇÅ p‚ÇÇ (SG.Res‚àô ¬¨p x)) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.read .p‚ÇÇ q r)) = ‚ä•-elim (¬¨p (trans-‚äë p‚ÇÇ p‚ÇÅ))
        aux (SG.read p‚ÇÅ p‚ÇÇ (SG.Iso .(SG.Res·¥∏ p‚ÇÉ) (SG.Res‚Çì p‚ÇÉ x))) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.readEx .p‚ÇÇ)) = S‚ÇÇ.Step (readEx p‚ÇÇ)
        aux (SG.read p‚ÇÅ p‚ÇÇ (SG.Res‚àô ¬¨p x)) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.readEx .p‚ÇÇ)) = ‚ä•-elim (¬¨p (trans-‚äë p‚ÇÇ p‚ÇÅ))
        aux (SG.fork p‚ÇÅ p‚ÇÇ x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.fork .p‚ÇÇ t‚ÇÇ)) = S‚ÇÇ.Step (S‚ÇÇ.fork p‚ÇÇ _)
        aux (SG.newMVar p‚ÇÅ p‚ÇÇ) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.newMVar .p‚ÇÇ q)) = S‚ÇÇ.Step (S‚ÇÇ.newMVar p‚ÇÇ q)
        aux (SG.putMVar p‚ÇÅ e·µó x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.putMVarCtx (S‚ÇÇ.Pure x‚ÇÅ))) with PRedex-Œµ-Iso e·µó (Step x‚ÇÅ)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.putMVarCtx (S‚ÇÇ.Pure s))
        aux (SG.putMVar p‚ÇÅ (SG.Res .p‚ÇÅ x‚ÇÅ) x) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.putMVar q r‚ÇÅ)) = S‚ÇÇ.Step (putMVar q (write-store p‚ÇÅ q eÀ¢ x‚ÇÅ r‚ÇÅ))
        aux (SG.putMVar p‚ÇÅ (SG.Res‚Çì .p‚ÇÅ e·µó) x) eÀ¢ (S‚ÇÇ.Step S‚ÇÇ.putMVarEx) = S‚ÇÇ.Step putMVarEx
        aux (SG.takeMVar p‚ÇÅ e·µó) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.takeMVarCtx (Pure x))) with PRedex-Œµ-Iso e·µó (Step x)
        ... | Step s = S‚ÇÇ.Step (S‚ÇÇ.takeMVarCtx (S‚ÇÇ.Pure s))
        aux (SG.takeMVar p‚ÇÅ (SG.Res .p‚ÇÅ x)) eÀ¢ (S‚ÇÇ.Step (S‚ÇÇ.takeMVar q r)) = S‚ÇÇ.Step (takeMVar q (write-store p‚ÇÅ q eÀ¢ x r))
        aux (SG.takeMVar p‚ÇÅ (SG.Res‚Çì .p‚ÇÅ e·µó)) eÀ¢ (S‚ÇÇ.Step S‚ÇÇ.takeMVarEx) = S‚ÇÇ.Step takeMVarEx
        
-- -- To prove this we would need to prove the following lemmas:
-- -- IsValue (Œµ t) => IsValue t
-- -- Redex (Œµ Œ£) (Œµ t) => Redex Œ£ t
-- -- For thise we need the graph of the erasure function, therefore I am going to postulate them for the time being
-- Œµ-Stuck : ‚àÄ {l l‚Çê œÑ ls} {t : CTerm (Mac l œÑ)} {Œ£ : Store ls} -> (p : l ‚äë l‚Çê) -> Stuck Œ£ t -> Stuck (ŒµÀ¢ l‚Çê Œ£) (Œµ-Mac l‚Çê (yes p) t)
-- Œµ-Stuck {l} {l‚Çê} {t = t} {Œ£} p (stuck nS nV) = stuck f g
--   where f : Redex (ŒµÀ¢ l‚Çê Œ£)  (Œµ-Mac l‚Çê (yes p) t) -> ‚ä•
--         f s = nS (Redex-Œµ p s)
        
--         g : IsValue (Œµ-Mac l‚Çê (yes p) t) -> ‚ä•
--         g isV = nV (Value-Œµ p isV)

-- Œµ-IsFork : ‚àÄ {l‚Çê œÑ l} {t : CTerm (Mac l œÑ)}(x : Dec (l ‚äë l‚Çê)) -> ¬¨ (IsFork t) -> ¬¨ (IsFork (Œµ-Mac l‚Çê x t))
-- Œµ-IsFork {t = t} x nF y = aux x t nF y
--   where aux : ‚àÄ {l‚Çê œÑ l} (x : Dec (l ‚äë l‚Çê)) (t : CTerm (Mac l œÑ)) -> ¬¨ (IsFork t) -> ¬¨ (IsFork (Œµ-Mac l‚Çê x t))
--         aux (yes p) (Var x) nF ()
--         aux (yes p) (App t t‚ÇÅ) nF ()
--         aux (yes p) (If t Then t‚ÇÅ Else t‚ÇÇ) nF ()
--         aux (yes p) (unId t) nF ()        
--         aux (yes p) (Return t) nF ()
--         aux (yes p) (t >>= t‚ÇÅ) nF ()
--         aux (yes p) (Throw t) nF ()
--         aux (yes p) (Catch t t‚ÇÅ) nF ()
--         aux (yes p) (Mac t) nF ()
--         aux (yes p) (Mac‚Çì t) nF ()
--         aux (yes p) (label x t) nF ()
--         aux (yes p) (label‚àô x t) nF ()
--         aux (yes p) (unlabel x t) nF ()
--         aux (yes p) (join x t) nF ()
--         aux (yes p) (join‚àô x t) nF ()
--         aux (yes p) (read x t) nF ()
--         aux (yes p) (write x t t‚ÇÅ) nF ()
--         aux (yes p) (new x t) nF ()
--         aux (yes p) (fork x t) nF _ = ‚ä•-elim (nF (fork x t))
--         aux (yes p) (newMVar x) nF ()
--         aux (yes p) (takeMVar t) nF ()
--         aux (yes p) (putMVar t t‚ÇÅ) nF ()
--         aux (yes p) ‚àô nF ()
--         aux {l‚Çê} (no ¬¨p) t nF x with Œµ-Mac _ (no ¬¨p) t | Œµ-Mac-CTerm‚â°‚àô l‚Çê t ¬¨p
--         aux (no ¬¨p) t nF () | .‚àô | refl

-- Œµ-Is‚àô : ‚àÄ {l‚Çê œÑ l} {t : CTerm (Mac l œÑ)} -> (p : l ‚äë l‚Çê) -> ¬¨ (Is‚àô t) -> ¬¨ (Is‚àô (Œµ-Mac l‚Çê (yes p) t))
-- Œµ-Is‚àô {t = Var x} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = App t t‚ÇÅ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = If t Then t‚ÇÅ Else t‚ÇÇ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = unId t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = Return t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = t >>= t‚ÇÅ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = Throw t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = Catch t t‚ÇÅ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = Mac t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = Mac‚Çì t} p ¬¨‚àô ()
-- Œµ-Is‚àô {l‚Çê} {t = label {h = h} x t} p ¬¨‚àô is‚àô with h ‚äë? l‚Çê
-- Œµ-Is‚àô {l‚Çê} {._} {l} {label x t} p‚ÇÅ ¬¨‚àô () | yes p
-- Œµ-Is‚àô {l‚Çê} {._} {l} {label x t} p ¬¨‚àô () | no ¬¨p
-- Œµ-Is‚àô {t = label‚àô x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = unlabel x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {l‚Çê} {t = join {h = h} x t} p ¬¨‚àô is‚àô with h ‚äë? l‚Çê
-- Œµ-Is‚àô {l‚Çê} {._} {l} {join x t} p‚ÇÅ ¬¨‚àô () | yes p
-- Œµ-Is‚àô {l‚Çê} {._} {l} {join x t} p ¬¨‚àô () | no ¬¨p
-- Œµ-Is‚àô {t = join‚àô x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = read x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = write x t t‚ÇÅ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = new x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = fork x t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = newMVar x} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = takeMVar t} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = putMVar t t‚ÇÅ} p ¬¨‚àô ()
-- Œµ-Is‚àô {t = ‚àô} p ¬¨‚àô is‚àô = ¬¨‚àô ‚àô

-- Œµ-‚Üë : ‚àÄ {l l‚Çê ls e} {p‚ÇÅ p‚ÇÇ : Program ls (Mac l ÔºàÔºâ)} -> (p : l ‚äë l‚Çê) -> p‚ÇÅ ‚üº p‚ÇÇ ‚Üë e ->
--         let ‚ü® Œ£‚ÇÅ ‚à• t‚ÇÅ ‚ü© = p‚ÇÅ
--             ‚ü® Œ£‚ÇÇ ‚à• t‚ÇÇ ‚ü© = p‚ÇÇ in
--         ‚ü® ŒµÀ¢ l‚Çê Œ£‚ÇÅ ‚à• Œµ-Mac l‚Çê (yes p) t‚ÇÅ ‚ü© ‚üº ‚ü® ŒµÀ¢ l‚Çê Œ£‚ÇÇ ‚à• Œµ-Mac l‚Çê (yes p) t‚ÇÇ ‚ü© ‚Üë (Œµ·µâ (yes p) e)
-- Œµ-‚Üë p (bullet x) = bullet (Œµ-Mac-dist _ (yes p) x)
-- Œµ-‚Üë {l‚Çê = l‚Çê} p (fork {h = h} p‚ÇÅ t s) = fork p‚ÇÅ (Œµ-Mac _ (h ‚äë? l‚Çê) t) (Œµ-Mac-dist l‚Çê (yes p) s)
-- Œµ-‚Üë p (none nF ¬¨‚àô s) = none (Œµ-IsFork (yes p) nF) (Œµ-Is‚àô p ¬¨‚àô) (Œµ-Mac-dist _ (yes p) s)

-- --------------------------------------------------------------------------------

-- Œµ-update·µñ-‚â° : ‚àÄ {l l‚Çê n ls} {t : Thread l} {ps‚ÇÅ ps‚ÇÇ : Pools ls} -> ¬¨ (l ‚äë l‚Çê) -> ps‚ÇÇ ‚Üê ps‚ÇÅ [ l ][ n ]‚âî t -> Œµ·¥æ l‚Çê ps‚ÇÅ ‚â° Œµ·¥æ l‚Çê ps‚ÇÇ
-- Œµ-update·µñ-‚â° {l} {l‚Çê} ¬¨p (Here x) with l ‚äë? l‚Çê
-- Œµ-update·µñ-‚â° ¬¨p (Here x) | yes p = ‚ä•-elim (¬¨p p)
-- Œµ-update·µñ-‚â° ¬¨p‚ÇÅ (Here x) | no ¬¨p = refl
-- Œµ-update·µñ-‚â° ¬¨p (There x) rewrite Œµ-update·µñ-‚â° ¬¨p x = refl

-- --------------------------------------------------------------------------------

-- Œµ-read‚àô  : ‚àÄ {l l‚Çê ls n} {ps : Pools ls} {t : Thread l} -> ¬¨ ( l ‚äë l‚Çê) -> ps [ l ][ n ]= t -> Œµ·¥æ l‚Çê ps [ l ][ n ]= ‚àô
-- Œµ-read‚àô {l} {l‚Çê} {ps = x ‚óÖ ps} ¬¨p (Here a) with l ‚äë? l‚Çê
-- Œµ-read‚àô {l} {l‚Çê} {._} {n'} {x ‚óÖ ps} ¬¨p (Here a) | yes p = ‚ä•-elim (¬¨p p)
-- Œµ-read‚àô {l} {l‚Çê} {._} {n'} {x ‚óÖ ps} ¬¨p‚ÇÅ (Here a) | no ¬¨p = Here ‚àô
-- Œµ-read‚àô {ps = x ‚óÖ ps} ¬¨p (There q) = There (Œµ-read‚àô ¬¨p q)

-- Œµ-read : ‚àÄ {l l‚Çê n' n} {t : Thread l} {ts : Pool l n'} -> (x : Dec (l ‚äë l‚Çê)) -> LookupThread t n ts -> LookupThread (Œµ-Mac l‚Çê x t) n (Œµ·µó x ts)
-- Œµ-read (yes p) ‚àô = ‚àô
-- Œµ-read (yes p) Here = Here
-- Œµ-read (yes p) (There a) = There (Œµ-read (yes p) a)
-- Œµ-read {t = t} (no ¬¨p) a with Œµ-Mac-CTerm‚â°‚àô _ t ¬¨p
-- ... | eq rewrite eq = ‚àô

-- Œµ-read·µñ : ‚àÄ {l l‚Çê n ls} {ps : Pools ls} {t : Thread l} -> (x : Dec (l ‚äë l‚Çê)) -> ps [ l ][ n ]= t -> (Œµ·¥æ l‚Çê ps) [ l ][ n ]= (Œµ-Mac _ x t)
-- Œµ-read·µñ {l} {l‚Çê} {t = t} x (Here {p = ts} y) with Œµ-Mac-extensional x (l ‚äë? l‚Çê) t
-- ... | eq rewrite eq = Here (Œµ-read (l ‚äë? l‚Çê) y)
-- Œµ-read·µñ x (There y) = There (Œµ-read·µñ x y)

-- Œµ-read·µó : ‚àÄ {l l‚Çê ls n} {ps : Pools ls} {ts : Pool l n} -> (x : Dec (l ‚äë l‚Çê)) -> ps [ l ]= ts ->  (Œµ·¥æ l‚Çê ps) [ l ]= Œµ·µó x ts
-- Œµ-read·µó {l} {l‚Çê} {ts = ts} x Here rewrite Œµ·µó-extensional x (l ‚äë? l‚Çê) ts = Here
-- Œµ-read·µó x (There y) = There (Œµ-read·µó x y)

-- --------------------------------------------------------------------------------

-- Œµ-update : ‚àÄ {l l‚Çê n' n} {ts‚ÇÅ ts‚ÇÇ : Pool l n'} {t : Thread l} -> (p : l ‚äë l‚Çê) ->
--                UpdateThread t n ts‚ÇÅ ts‚ÇÇ -> 
--                UpdateThread (Œµ-Mac l‚Çê (yes p) t) n (Œµ·µó (yes p) ts‚ÇÅ) (Œµ·µó (yes p) ts‚ÇÇ)
-- Œµ-update p ‚àô = ‚àô
-- Œµ-update p upd = upd
-- Œµ-update p (skip a) = skip (Œµ-update p a)

-- Œµ-update·µñ : ‚àÄ {l l‚Çê n ls} {ps‚ÇÅ ps‚ÇÇ : Pools ls} {t : Thread l} -> (p : l ‚äë l‚Çê) ->
--              ps‚ÇÇ ‚Üê ps‚ÇÅ [ l ][ n ]‚âî t  ->
--              (Œµ·¥æ l‚Çê ps‚ÇÇ) ‚Üê (Œµ·¥æ l‚Çê ps‚ÇÅ) [ l ][ n ]‚âî (Œµ-Mac _ (yes p) t)
-- Œµ-update·µñ {l} {l‚Çê} {t = t} p (Here {p‚ÇÅ = ts‚ÇÅ} {p‚ÇÇ = ts‚ÇÇ} x)
--   rewrite Œµ·µó-extensional (l ‚äë? l‚Çê) (yes p) ts‚ÇÅ | Œµ·µó-extensional (l ‚äë? l‚Çê) (yes p) ts‚ÇÇ = Here (Œµ-update p x)
-- Œµ-update·µñ p (There a) = There (Œµ-update·µñ p a)

-- ‚ñª-‚â° : ‚àÄ {l l‚Çê n} (ts : Pool l n) (t : Thread l)  (x : Dec (l ‚äë l‚Çê)) -> (Œµ·µó x ts ‚ñª Œµ-Mac _ x t) ‚â° Œµ·µó (l ‚äë? l‚Çê) (ts ‚ñª t)
-- ‚ñª-‚â° {l} {l‚Çê} ts t (yes p) with Œµ·µó-extensional (l ‚äë? l‚Çê) (yes p) (ts ‚ñª t)
-- ... | eq rewrite eq = sym (Œµ-‚ñª-‚â° p t ts)
-- ‚ñª-‚â° {l} {l‚Çê} ts t (no ¬¨p) with l ‚äë? l‚Çê
-- ‚ñª-‚â° ts t (no ¬¨p) | yes p = ‚ä•-elim (¬¨p p)
-- ‚ñª-‚â° ts t (no ¬¨p‚ÇÅ) | no ¬¨p = refl

-- Œµ-update-‚ñª : ‚àÄ {l l‚Çê ls n} {ps‚ÇÅ ps‚ÇÇ : Pools ls} {ts : Pool l n} {t : Thread l} -> (x : Dec (l ‚äë l‚Çê)) ->
--                ps‚ÇÇ ‚Üê ps‚ÇÅ [ l ]‚âî (ts ‚ñª t) ->
--                Œµ·¥æ l‚Çê ps‚ÇÇ ‚Üê Œµ·¥æ l‚Çê ps‚ÇÅ [ l ]‚âî ((Œµ·µó x ts) ‚ñª (Œµ-Mac _ x t))
-- Œµ-update-‚ñª {l} {l‚Çê} {ts = ts} {t = t} x Here with ‚ñª-‚â° ts t x
-- ... | eq rewrite eq = Here
-- Œµ-update-‚ñª x (There y) = There (Œµ-update-‚ñª x y)

-- Œµ-update·µó-‚â° : ‚àÄ {l l‚Çê ls n} {ps‚ÇÅ ps‚ÇÇ : Pools ls} {ts : Pool l n} -> ¬¨ (l ‚äë l‚Çê) ->
--             ps‚ÇÇ ‚Üê ps‚ÇÅ [ l ]‚âî ts -> Œµ·¥æ l‚Çê ps‚ÇÅ ‚â° Œµ·¥æ l‚Çê ps‚ÇÇ
-- Œµ-update·µó-‚â° {l} {l‚Çê} ¬¨p Here with l ‚äë? l‚Çê
-- Œµ-update·µó-‚â° ¬¨p Here | yes p = ‚ä•-elim (¬¨p p)
-- Œµ-update·µó-‚â° ¬¨p‚ÇÅ Here | no ¬¨p = refl
-- Œµ-update·µó-‚â° ¬¨p (There x) rewrite Œµ-update·µó-‚â° ¬¨p x = refl

-- --------------------------------------------------------------------------------

-- Œµ-fork? : ‚àÄ {h l‚Çê l n} -> (p : l ‚äë h) (x : Dec (h ‚äë l‚Çê)) -> (t : Thread h) -> Œµ·¥± l‚Çê (fork? p t n)  ‚â° fork? p (Œµ-Mac l‚Çê x t) n
-- Œµ-fork? l‚äëh (yes p) t with is‚àô? t
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) .‚àô | yes ‚àô = refl
-- Œµ-fork? {h} {l‚Çê} l‚äëh (yes p) t | no ¬¨p with h ‚äë? l‚Çê
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Var x) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (App t t‚ÇÅ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (If t Then t‚ÇÅ Else t‚ÇÇ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (unId t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Return t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (t >>= t‚ÇÅ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Throw t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Catch t t‚ÇÅ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Mac t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (Mac‚Çì t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (unlabel x t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (read x t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (write x t t‚ÇÅ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (fork x t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (takeMVar t) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) (putMVar t t‚ÇÅ) | no ¬¨p | yes p = refl
-- Œµ-fork? l‚äëh (yes p‚ÇÅ) ‚àô | no ¬¨p | yes p = ‚ä•-elim (¬¨p ‚àô)
-- Œµ-fork? l‚äëh (yes p) t | no ¬¨p‚ÇÅ | no ¬¨p = ‚ä•-elim (¬¨p p)
-- Œµ-fork? l‚äëh (no ¬¨p) t with Œµ-Mac-CTerm‚â°‚àô _ t ¬¨p
-- ... | eq rewrite eq with is‚àô? t
-- Œµ-fork? l‚äëh (no ¬¨p) t | refl | yes p = refl
-- Œµ-fork? {h} {l‚Çê} l‚äëh (no ¬¨p‚ÇÅ) t | refl | no ¬¨p with h ‚äë? l‚Çê
-- ... | yes p' = ‚ä•-elim (¬¨p‚ÇÅ p')
-- ... | no ¬¨p' = refl

-- -- Distributivity
-- Œµ·µç-dist : ‚àÄ {l n ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> (l‚Çê : Label) -> l , n ‚ä¢ g‚ÇÅ ‚Ü™ g‚ÇÇ -> l , n ‚ä¢ (Œµ·µç l‚Çê g‚ÇÅ) ‚Ü™ (Œµ·µç l‚Çê g‚ÇÇ)

-- Œµ·µç-dist {l} l‚Çê (step r st sc w)  with l ‚äë? l‚Çê
-- Œµ·µç-dist l‚Çê (step r st sc w) | yes p = step (Œµ-read·µñ (yes p) r) ((Œµ-‚Üë p st)) (Œµ-sch-dist ùì¢ (yes p) sc ) (Œµ-update·µñ p w)
-- Œµ·µç-dist l‚Çê (step r st sc w) | no ¬¨p
--   with Œµ-read‚àô ¬¨p r | (Œµ-sch-dist ùì¢ (no ¬¨p) sc) |  ŒµÀ¢-‚â° l‚Çê ¬¨p (stepOf st) | Œµ-update·µñ-‚â° ¬¨p w | Œµ-sch-‚â° ùì¢ ¬¨p sc
-- ... | x | sc' | eq‚ÇÅ | eq‚ÇÇ | eq‚ÇÉ rewrite eq‚ÇÅ | eq‚ÇÇ | eq‚ÇÉ = hole x (bullet (Pure Hole)) sc'

-- Œµ·µç-dist {l} l‚Çê (fork r‚ÇÅ r‚ÇÇ st sc w‚ÇÅ w‚ÇÇ) with l ‚äë? l‚Çê
-- Œµ·µç-dist {l} l‚Çê (fork {h = h} {n ∞ = n ∞} {t ∞ = t ∞} {l‚äëh = l‚äëh} r‚ÇÅ r‚ÇÇ st sc w‚ÇÅ w‚ÇÇ) | yes p with Œµ-sch-dist ùì¢ (yes p) sc
-- ... | sc' rewrite Œµ-fork? {n = n ∞} l‚äëh (h ‚äë? l‚Çê) t ∞
--   = fork (Œµ-read·µñ (yes p) r‚ÇÅ) (Œµ-read·µó (h ‚äë? l‚Çê) r‚ÇÇ) (Œµ-‚Üë p st) sc' (Œµ-update-‚ñª (h ‚äë? l‚Çê) w‚ÇÅ) (Œµ-update·µñ p w‚ÇÇ)
-- Œµ·µç-dist l‚Çê (fork r‚ÇÅ r‚ÇÇ st sc w‚ÇÅ w‚ÇÇ) | no ¬¨p
--   with Œµ-read‚àô ¬¨p r‚ÇÅ | (Œµ-sch-dist ùì¢ (no ¬¨p) sc) |  ŒµÀ¢-‚â° l‚Çê ¬¨p (stepOf st)
--        | Œµ-update·µó-‚â° (trans-‚ã¢ (fork-‚äë st) ¬¨p) w‚ÇÅ | Œµ-update·µñ-‚â° ¬¨p w‚ÇÇ | Œµ-sch-‚â° ùì¢ ¬¨p sc
-- ... | x | sc' | eq‚ÇÅ | eq‚ÇÇ | eq‚ÇÉ | eq‚ÇÑ rewrite eq‚ÇÅ | eq‚ÇÇ | eq‚ÇÉ | eq‚ÇÑ = hole x (bullet (Pure Hole)) sc'

-- Œµ·µç-dist {l} l‚Çê (hole r (bullet (Pure Hole)) sc) with l ‚äë? l‚Çê
-- ... | yes p = hole (Œµ-read·µñ (yes p) r) (bullet (Pure Hole)) (Œµ-sch-dist ùì¢ (yes p) sc)
-- ... | no ¬¨p = hole (Œµ-read·µñ (no ¬¨p) r) (bullet (Pure Hole)) (Œµ-sch-dist ùì¢ (no ¬¨p) sc)

-- Œµ·µç-dist {l} l‚Çê (skip r st sc) with l ‚äë? l‚Çê
-- ... | yes p = skip (Œµ-read·µñ (yes p) r) (Œµ-Stuck p st) (Œµ-sch-dist ùì¢ (yes p) sc)
-- ... | no ¬¨p with Œµ-sch-dist ùì¢ (no ¬¨p) sc
-- ... | sc' rewrite Œµ-sch-‚â° ùì¢ ¬¨p sc = hole (Œµ-read‚àô ¬¨p r) (bullet (Pure Hole)) sc'

-- Œµ·µç-dist {l} l‚Çê (exit r isV sc) with l ‚äë? l‚Çê
-- ... | yes p = exit (Œµ-read·µñ (yes p) r) (Œµ-IsValue p isV) (Œµ-sch-dist ùì¢ (yes p) sc)
-- ... | no ¬¨p  with Œµ-sch-dist ùì¢ (no ¬¨p) sc
-- ... | sc' rewrite Œµ-sch-‚â° ùì¢ ¬¨p sc = hole (Œµ-read‚àô ¬¨p r) (bullet (Pure Hole)) sc'
