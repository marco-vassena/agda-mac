open import Lattice public
open import Scheduler public

module Concurrent.Calculus (ùìõ : Lattice) (ùì¢ : Scheduler ùìõ) where

open import Sequential.Calculus public

--------------------------------------------------------------------------------

-- Pool of threads at a certain label
data Pool (l : Label) : ‚Ñï -> Set where
  [] : Pool l 0
  _‚óÖ_ : ‚àÄ {n} -> Thread l -> Pool l n -> Pool l (suc n)
  ‚àô : ‚àÄ {n} -> Pool l n

infixr 3 _‚óÖ_

-- Enqueue
_‚ñª_ : ‚àÄ {n l} -> Pool l n -> Thread l -> Pool l (suc n)
[] ‚ñª t = t ‚óÖ []
(x ‚óÖ ts) ‚ñª t = x ‚óÖ (ts ‚ñª t) 
‚àô ‚ñª t = ‚àô

--------------------------------------------------------------------------------

-- A list of pools 
data Pools : List Label -> Set where
  [] : Pools []
  _‚óÖ_ : ‚àÄ {l ls n} {{u : Unique l ls}} -> Pool l n -> Pools ls -> Pools (l ‚à∑ ls)

open import Relation.Binary.PropositionalEquality

pools-unique : ‚àÄ {l ls} -> (x y : l ‚àà ls) -> Pools ls -> x ‚â° y
pools-unique Here Here (x ‚óÖ p) = refl
pools-unique Here (There y) (_‚óÖ_ {{u}} t p) = ‚ä•-elim (‚àà-not-unique y u)
pools-unique (There x) Here (_‚óÖ_ {{u}} t p) = ‚ä•-elim (‚àà-not-unique x u)
pools-unique (There x) (There y) (x‚ÇÅ ‚óÖ p) rewrite pools-unique x y p = refl

infixl 3 _‚ñª_

--------------------------------------------------------------------------------

open Scheduler.Scheduler ùìõ ùì¢

-- The global configuration is a thread pool paired with some shared split memory Œ£
record Global (ls : List Label) : Set where
  constructor ‚ü®_,_,_‚ü©
  field state : State
  field store·µç : Store ls
  field pools : Pools ls

open Global
open import Relation.Binary.PropositionalEquality

state-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> state g‚ÇÅ ‚â° state g‚ÇÇ
state-‚â° refl = refl

store·µç-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> store·µç g‚ÇÅ ‚â° store·µç g‚ÇÇ
store·µç-‚â° refl = refl

pools-‚â° : ‚àÄ {ls} {g‚ÇÅ g‚ÇÇ : Global ls} -> g‚ÇÅ ‚â° g‚ÇÇ -> pools g‚ÇÅ ‚â° pools g‚ÇÇ
pools-‚â° refl = refl

