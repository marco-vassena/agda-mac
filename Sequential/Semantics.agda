open import Lattice

module Sequential.Semantics (ùìõ : Lattice) where

open import Relation.Binary.PropositionalEquality hiding (subst ; [_])
open import Sequential.Calculus ùìõ public

data _‚áù_ : ‚àÄ {œÑ} -> CTerm œÑ -> CTerm œÑ -> Set where

  -- Reduces the function in an application
  AppL : ‚àÄ {Œ± Œ≤} {c‚ÇÅ c‚ÇÇ : CTerm (Œ± => Œ≤)} {x : CTerm Œ±} -> c‚ÇÅ ‚áù c‚ÇÇ -> App c‚ÇÅ x ‚áù App c‚ÇÇ x

  -- Pushes a term in the environment
  Beta : ‚àÄ {Œ± Œ≤} {t : Term (Œ± ‚à∑ []) Œ≤} {x : CTerm Œ±} -> App (Abs t) x ‚áù subst x t

  IfCond : ‚àÄ {œÑ} {c c' : CTerm Bool} {t e : CTerm œÑ} -> c ‚áù c' ->
             (If c Then t Else e) ‚áù (If c' Then t Else e)

  IfTrue : ‚àÄ {œÑ} {t e : CTerm œÑ} -> (If True Then t Else e) ‚áù t

  IfFalse : ‚àÄ {œÑ} {t e : CTerm œÑ} -> (If False Then t Else e) ‚áù e

  unIdCtx : ‚àÄ {œÑ} {t‚ÇÅ t‚ÇÇ : CTerm (Id œÑ)} -> t‚ÇÅ ‚áù t‚ÇÇ -> unId t‚ÇÅ ‚áù unId t‚ÇÇ

  unId : ‚àÄ {œÑ} {t : CTerm œÑ} -> unId (Id t) ‚áù t

  appFunIdCtx‚ÇÅ : ‚àÄ {Œ± Œ≤} {f‚ÇÅ f‚ÇÇ : CTerm (Id (Œ± => Œ≤))} {x : CTerm (Id Œ±)} -> f‚ÇÅ ‚áù f‚ÇÇ -> (f‚ÇÅ <*>·¥µ x) ‚áù (f‚ÇÇ <*>·¥µ x)

  appFunIdCtx‚ÇÇ : ‚àÄ {Œ± Œ≤} {f‚ÇÅ f‚ÇÇ : CTerm (Œ± => Œ≤)} {x : CTerm (Id Œ±)} -> f‚ÇÅ ‚áù f‚ÇÇ -> (Id f‚ÇÅ <*>·¥µ x) ‚áù (Id f‚ÇÇ <*>·¥µ x)

  appFunIdCtx‚ÇÉ : ‚àÄ {Œ± Œ≤} {t : Term (Œ± ‚à∑ []) Œ≤} {x‚ÇÅ x‚ÇÇ : CTerm (Id Œ±)} -> x‚ÇÅ ‚áù x‚ÇÇ -> (Id (Abs t) <*>·¥µ x‚ÇÅ) ‚áù (Id (Abs t) <*>·¥µ x‚ÇÇ)

  appFunId : ‚àÄ {Œ± Œ≤} {t : Term (Œ± ‚à∑ []) Œ≤} {x : CTerm Œ±} -> (Id (Abs t) <*>·¥µ (Id x)) ‚áù (Id (subst x t))

  Return : ‚àÄ {œÑ} {l : Label} {t : CTerm œÑ} -> Return {l = l} t ‚áù Mac t

  Throw : ‚àÄ {l : Label}  {Œ± : Ty} {e : CTerm Exception} -> Throw {l = l} {Œ±} e ‚áù Mac‚Çì e 

  Bind : ‚àÄ {l Œ± Œ≤} {t : CTerm Œ±} {k : CTerm (Œ± => Mac l Œ≤)} -> (Mac t >>= k) ‚áù App k t

  BindEx : ‚àÄ {l Œ± Œ≤} {e : CTerm Exception} {k : CTerm (Œ± => Mac l Œ≤)} -> (Mac‚Çì e >>= k) ‚áù Throw e

  Catch : ‚àÄ {l : Label} {Œ± : Ty} {t : CTerm Œ±} {h : CTerm (Exception => Mac l Œ±)} ->
            Catch (Mac t) h ‚áù (Return t)

  CatchEx : ‚àÄ {l : Label} {Œ± : Ty} {e : CTerm Exception} {h : CTerm (Exception => Mac l Œ±)} ->
              Catch (Mac‚Çì e) h ‚áù App h e

  label : ‚àÄ {l h Œ±} {t : CTerm Œ±} -> (p : l ‚äë h) -> label p t ‚áù Return (Res (Id t))

  label‚àô : ‚àÄ {l h Œ±} {t : CTerm Œ±} -> (p : l ‚äë h) -> label‚àô p t ‚áù Return (Res ‚àô)

  unlabelCtx‚ÇÅ : ‚àÄ {l h Œ±} {c‚ÇÅ c‚ÇÇ : CTerm (Labeled l Œ±)} -> (p : l ‚äë h) -> c‚ÇÅ ‚áù c‚ÇÇ -> unlabel p c‚ÇÅ ‚áù unlabel p c‚ÇÇ

  unlabelCtx‚ÇÇ : ‚àÄ {l h Œ±} {c‚ÇÅ c‚ÇÇ : CTerm (Id Œ±)} -> (p : l ‚äë h) -> c‚ÇÅ ‚áù c‚ÇÇ -> unlabel p (Res c‚ÇÅ) ‚áù unlabel p (Res c‚ÇÇ)

  unlabel : ‚àÄ {l h Œ±} {t : CTerm (Id Œ±)} -> (p : l ‚äë h) -> unlabel p (Res (Id t)) ‚áù Return t

  unlabelEx : ‚àÄ {l h Œ±} {e : CTerm Exception} -> (p : l ‚äë h) -> unlabel {Œ± = Œ±} p (Res‚Çì e) ‚áù  Throw e

  --------------------------------------------------------------------------------
  -- Applicative Functor rules
  
  appFunCtx‚ÇÅ : ‚àÄ {l Œ± Œ≤} {f‚ÇÅ f‚ÇÇ : CTerm (Labeled l (Œ± => Œ≤))} {x : CTerm (Labeled l Œ±)} -> f‚ÇÅ ‚áù f‚ÇÇ -> (f‚ÇÅ <*> x) ‚áù (f‚ÇÇ <*> x)
  
  appFunCtx‚ÇÇ : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {x‚ÇÅ x‚ÇÇ : CTerm (Labeled l Œ±)} -> x‚ÇÅ ‚áù x‚ÇÇ -> (Res f <*> x‚ÇÅ) ‚áù (Res f <*> x‚ÇÇ)

  -- We cannot shortcut the computation, that would break determinism
  appFunCtx‚ÇÇ‚Çì : ‚àÄ {l Œ≤ Œ±} {e : CTerm Exception} {x‚ÇÅ x‚ÇÇ : CTerm (Labeled l Œ±)} -> x‚ÇÅ ‚áù x‚ÇÇ -> (Res‚Çì {Œ± = Id (Œ± => Œ≤)} e <*> x‚ÇÅ) ‚áù ((Res‚Çì e) <*> x‚ÇÇ)

 -- Using the Id Applicative functor instance
  appFun : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {x : CTerm (Id Œ±)} -> (Res {l = l} f <*> Res x) ‚áù Res (f <*>·¥µ x)

  appFun‚ÇÅ‚Çì : ‚àÄ {l Œ± Œ≤} {e : CTerm Exception} {x : CTerm (Id Œ±)} -> (Res‚Çì {l = l} {Œ± = Id (Œ± => Œ≤)} e <*> Res x) ‚áù Res‚Çì e

  appFun‚ÇÇ‚Çì : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {e : CTerm Exception} -> (Res {l = l} f <*> Res‚Çì e) ‚áù Res‚Çì e

   -- We need also this case. We report exceptions in the same order as in lazy evaluation
  appFun‚ÇÅ‚ÇÇ‚Çì : ‚àÄ {l Œ± Œ≤} {e‚ÇÅ e‚ÇÇ : CTerm Exception} -> (Res‚Çì {l = l} {Œ± = Id (Œ± => Œ≤)} e‚ÇÅ <*> Res‚Çì e‚ÇÇ) ‚áù Res‚Çì e‚ÇÅ

  --------------------------------------------------------------------------------
  -- Bulletized rules for <*>‚àô
  appFunCtx‚àô‚ÇÅ : ‚àÄ {l Œ± Œ≤} {f‚ÇÅ f‚ÇÇ : CTerm (Labeled l (Œ± => Œ≤))} {x : CTerm (Labeled l Œ±)} -> f‚ÇÅ ‚áù f‚ÇÇ -> (f‚ÇÅ <*>‚àô x) ‚áù (f‚ÇÇ <*>‚àô x)
  
  appFunCtx‚àô‚ÇÇ : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {x‚ÇÅ x‚ÇÇ : CTerm (Labeled l Œ±)} -> x‚ÇÅ ‚áù x‚ÇÇ -> (Res f <*>‚àô x‚ÇÅ) ‚áù (Res f <*>‚àô x‚ÇÇ)

  appFunCtx‚àô‚ÇÇ‚Çì : ‚àÄ {l Œ≤ Œ±} {e : CTerm Exception} {x‚ÇÅ x‚ÇÇ : CTerm (Labeled l Œ±)} -> x‚ÇÅ ‚áù x‚ÇÇ -> (Res‚Çì {Œ± = Id (Œ± => Œ≤)} e <*>‚àô x‚ÇÅ) ‚áù ((Res‚Çì e) <*>‚àô x‚ÇÇ)

  appFun‚àô : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {x : CTerm (Id Œ±)} -> (Res {l = l} f <*>‚àô Res x) ‚áù Res ‚àô

  appFun‚àô‚ÇÅ‚Çì : ‚àÄ {l Œ± Œ≤} {e : CTerm Exception} {x : CTerm (Id Œ±)} -> (Res‚Çì {l = l} {Œ± = Id (Œ± => Œ≤)} e <*>‚àô Res x) ‚áù Res‚Çì e

  appFun‚àô‚ÇÇ‚Çì : ‚àÄ {l Œ± Œ≤} {f : CTerm (Id (Œ± => Œ≤))} {e : CTerm Exception} -> (Res {l = l} f <*>‚àô Res‚Çì e) ‚áù Res‚Çì e

  appFun‚àô‚ÇÅ‚ÇÇ‚Çì : ‚àÄ {l Œ± Œ≤} {e‚ÇÅ e‚ÇÇ : CTerm Exception} -> (Res‚Çì {l = l} {Œ± = Id (Œ± => Œ≤)} e‚ÇÅ <*>‚àô Res‚Çì e‚ÇÇ) ‚áù Res‚Çì e‚ÇÅ

  --------------------------------------------------------------------------------

  -- Bullet reduces to itself. We need this rule because ‚àô is not a value.
  Hole : ‚àÄ {œÑ : Ty} -> (‚àô {{œÑ}}) ‚áù ‚àô

  --------------------------------------------------------------------------------
  -- Relabel
  relabelCtx : ‚àÄ {l h Œ±} {c‚ÇÅ c‚ÇÇ : CTerm (Labeled l Œ±)} -> (p : l ‚äë h) -> c‚ÇÅ ‚áù c‚ÇÇ -> relabel p c‚ÇÅ ‚áù relabel p c‚ÇÇ

  relabel : ‚àÄ {l h Œ±} {t : CTerm (Id Œ±)} -> (p : l ‚äë h) -> relabel p (Res t) ‚áù Res t

  relabelEx : ‚àÄ {l h Œ±} {e : CTerm Exception} -> (p : l ‚äë h) -> relabel {Œ± = Œ±} p (Res‚Çì e) ‚áù Res‚Çì e

 --------------------------------------------------------------------------------
  -- ‚àôed rules for relabel
  relabelCtx‚àô : ‚àÄ {l h Œ±} {c‚ÇÅ c‚ÇÇ : CTerm (Labeled l Œ±)} -> (p : l ‚äë h) -> c‚ÇÅ ‚áù c‚ÇÇ -> relabel‚àô p c‚ÇÅ ‚áù relabel‚àô p c‚ÇÇ

  relabel‚àô : ‚àÄ {l h Œ±} {c : CTerm (Id Œ±)} -> (p : l ‚äë h) -> relabel‚àô p (Res c) ‚áù Res ‚àô 

  relabelEx‚àô : ‚àÄ {l h Œ±} {c : CTerm Exception} -> (p : l ‚äë h) -> relabel‚àô {Œ± = Œ±} p (Res‚Çì c) ‚áù Res ‚àô 

mutual
  infixr 1 _‚üº_

  -- The transitive reflexive closure of the small step relation
  data _‚üº‚ãÜ_ {ls : List Label} {œÑ : Ty} : Program ls œÑ -> Program ls œÑ -> Set where
    [] : {s : Store ls} {c : CTerm œÑ} -> ‚ü® s ‚à• c ‚ü©  ‚üº‚ãÜ ‚ü® s ‚à• c ‚ü©
    _‚à∑_ : {s‚ÇÅ s‚ÇÇ s‚ÇÉ : Store ls} {c‚ÇÅ c‚ÇÇ c‚ÇÉ : CTerm œÑ} ->
          ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© -> ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© ‚üº‚ãÜ ‚ü® s‚ÇÉ ‚à• c‚ÇÉ ‚ü© -> ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº‚ãÜ ‚ü® s‚ÇÉ ‚à• c‚ÇÉ ‚ü©

  -- A big step is made of a finite number (possibly 0) of reduction steps that reduces a term to a value.
  data _‚áì_ {ls : List Label} {œÑ : Ty} : Program ls œÑ -> Program ls œÑ -> Set where
    BigStep : ‚àÄ {s‚ÇÅ s‚ÇÇ : Store ls} {c v : CTerm œÑ} -> IsValue v -> ‚ü® s‚ÇÅ ‚à• c ‚ü© ‚üº‚ãÜ ‚ü® s‚ÇÇ ‚à• v ‚ü© -> ‚ü® s‚ÇÅ ‚à• c ‚ü© ‚áì ‚ü® s‚ÇÇ ‚à• v ‚ü©

  -- Small step semantics of programs
  data _‚üº_ {ls : List Label} : ‚àÄ {œÑ} -> Program ls œÑ -> Program ls œÑ -> Set where
    Pure : ‚àÄ {œÑ} {s‚ÇÅ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm œÑ} -> c‚ÇÅ ‚áù c‚ÇÇ -> ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÅ ‚à• c‚ÇÇ ‚ü©

    BindCtx : ‚àÄ {l Œ± Œ≤} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (Mac l Œ±)} {k : CTerm (Œ± => Mac l Œ≤)} ->
                ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
                ‚ü® s‚ÇÅ  ‚à•  c‚ÇÅ >>= k ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ >>= k ‚ü© 

    CatchCtx : ‚àÄ {l Œ±} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (Mac l Œ±)} {h : CTerm (Exception => Mac l Œ±)} ->
                 ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
                 ‚ü® s‚ÇÅ ‚à• Catch c‚ÇÅ h ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• Catch c‚ÇÇ h ‚ü©

    -- we shall not use label here because for distributivity we need to end up with Return (Res ‚àô) so that join‚àô applies
    join : ‚àÄ {l h Œ±} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls}  {c : CTerm (Mac h Œ±)} {t : CTerm Œ±} (p : l ‚äë h) ->
             ‚ü® s‚ÇÅ ‚à• c ‚ü© ‚áì ‚ü® s‚ÇÇ ‚à•  Mac t ‚ü© ->
             ‚ü® s‚ÇÅ ‚à• join p c ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• Return (Res (Id t)) ‚ü© 

    joinEx : ‚àÄ {l h Œ±} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls} {c : CTerm (Mac h Œ±)} {e : CTerm Exception} (p : l ‚äë h) ->
               ‚ü® s‚ÇÅ ‚à• c ‚ü© ‚áì ‚ü® s‚ÇÇ ‚à•  Mac‚Çì e ‚ü© ->
               ‚ü® s‚ÇÅ ‚à• join p c ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• (Return (Res‚Çì e)) ‚ü©

    join‚àô : ‚àÄ {l h Œ±} {s : Store ls} {c : CTerm (Mac h Œ±)} (p : l ‚äë h) ->
               ‚ü® s ‚à• join‚àô p c ‚ü© ‚üº ‚ü® s ‚à• (Return (Res ‚àô)) ‚ü©

    -- In this rule we don't actually compute the proper reference but we just assume that is there and points
    -- to a fresh location. Unfortunately computing the reference in the rule makes the types too complex for reasoning.
    new : ‚àÄ {l h Œ±} {s : Store ls} {t : CTerm Œ±} -> (p : l ‚äë h) (q : h ‚àà ls) ->
               ‚ü® s ‚à• new p t ‚ü© ‚üº ‚ü® newÀ¢ q s ‚ü¶ t ‚üß ‚à• Return (length·µê (getMemory q s)) ‚ü©

    writeCtx :  ‚àÄ {l h Œ±} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (Ref h Œ±)} {c‚ÇÉ : CTerm Œ±} ->
                  (p : l ‚äë h) -> ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
                  ‚ü® s‚ÇÅ ‚à• write p c‚ÇÅ c‚ÇÉ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• write p c‚ÇÇ c‚ÇÉ  ‚ü©

    write : ‚àÄ {l h Œ±} {s : Store ls} {n : CTerm Nat} {c : CTerm Œ±} -> (p : l ‚äë h) (q : h ‚àà ls) (r : TypedIx Œ± F n (getMemory q s)) ->
              ‚ü® s ‚à• write p (Res n) c ‚ü© ‚üº ‚ü® s [ q ][ r ]‚âî ‚ü¶ c ‚üß ‚à• Return ÔºàÔºâ ‚ü©

    -- We need the proof h ‚àà ls in distributivity, when erased the exception is silently ignored, the write rule applies.
    -- The write is harmless because Memory h is collpased to ‚àô, but to perform that operation I still need the proof h ‚àà ls and  TypedIx œÑ n (getMemory q s)
    -- Furhtermore agda gives several problems in that proof if I explicitly use the same store s.
    -- One thing is that rewriting fails. The second problem is that not only the second store would be rewritten as s [ q ][ r ]‚âî c, but also the first
    -- thus preventing to apply the rule write.
    writeEx : ‚àÄ {l h Œ± n} {s : Store ls} {c : CTerm Œ±} {e : CTerm Exception} ->
              (p : l ‚äë h) (q : h ‚àà ls) (r : TypedIx Œ± F n (getMemory q s)) ->
              ‚ü® s ‚à• write p (Res‚Çì e) c ‚ü© ‚üº ‚ü® s ‚à• Return ÔºàÔºâ ‚ü©

    readCtx : ‚àÄ {l h Œ±} {s‚ÇÅ : Store ls} {s‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (Ref l Œ±)} -> (p : l ‚äë h) ->
              ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
              ‚ü® s‚ÇÅ ‚à• (read {Œ± = Œ±} p c‚ÇÅ) ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• (read p c‚ÇÇ) ‚ü©

    read : ‚àÄ {l h Œ± n} {s : Store ls} -> (p : l ‚äë h) (q : l ‚àà ls) -> (r : TypedIx Œ± F n (getMemory q s)) ->
              ‚ü® s ‚à• (read p (Res n)) ‚ü© ‚üº ‚ü® s ‚à• unlabel p (s [ q ][ r ]) ‚ü©

    readEx : ‚àÄ {l h Œ±} {s : Store ls} {e : CTerm Exception} -> (p : l ‚äë h) ->
              ‚ü® s ‚à• (read {Œ± = Œ±} p (Res‚Çì e)) ‚ü© ‚üº ‚ü® s ‚à• Throw e ‚ü©

    fork : ‚àÄ {l h} {Œ£ : Store ls} -> (p : l ‚äë h) (t : CTerm (Mac h ÔºàÔºâ)) ->  ‚ü® Œ£ ‚à• fork p t ‚ü© ‚üº ‚ü® Œ£ ‚à• (Return ÔºàÔºâ) ‚ü©

    -- This is repeating the new rule. If we actually separate Mac from IO we can reuse that as it actually happens
    newMVar : ‚àÄ {l h œÑ} {Œ£ : Store ls} -> (p : l ‚äë h) (q : h ‚àà ls) -> ‚ü® Œ£ ‚à• newMVar {Œ± = œÑ} p ‚ü© ‚üº ‚ü® newÀ¢ {œÑ = œÑ} q Œ£ ‚äû ‚à• (Return (length·µê (getMemory q Œ£))) ‚ü©

    putMVarCtx :  ‚àÄ {l Œ±} {Œ£‚ÇÅ Œ£‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (MVar l Œ±)} {c‚ÇÉ : CTerm Œ±} ->
                  ‚ü® Œ£‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® Œ£‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
                  ‚ü® Œ£‚ÇÅ ‚à• putMVar c‚ÇÅ c‚ÇÉ ‚ü© ‚üº ‚ü® Œ£‚ÇÇ ‚à• putMVar c‚ÇÇ c‚ÇÉ  ‚ü©

    -- Deciding whether r points to E or F is a read operation!!!
    putMVar : ‚àÄ {l œÑ n} {Œ£ : Store ls} {t : CTerm œÑ} -> (q : l ‚àà ls) (r : TypedIx œÑ E n (getMemory q Œ£)) ->
               ‚ü® Œ£ ‚à• putMVar (Res {l = l} n) t ‚ü© ‚üº ‚ü® Œ£ [ q ][ r ]‚âî ‚ü¶ t ‚üß ‚à• Return ÔºàÔºâ ‚ü©
              
    putMVarEx : ‚àÄ {l œÑ} {Œ£ : Store ls} {e : CTerm Exception} {t : CTerm œÑ} -> ‚ü® Œ£ ‚à• putMVar {l = l} (Res‚Çì e) t ‚ü© ‚üº ‚ü® Œ£ ‚à• Throw e ‚ü©

    takeMVarCtx :  ‚àÄ {l Œ±} {Œ£‚ÇÅ Œ£‚ÇÇ : Store ls} {c‚ÇÅ c‚ÇÇ : CTerm (MVar l Œ±)} ->
                  ‚ü® Œ£‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® Œ£‚ÇÇ ‚à• c‚ÇÇ ‚ü© ->
                  ‚ü® Œ£‚ÇÅ ‚à• takeMVar {Œ± = Œ±} c‚ÇÅ ‚ü© ‚üº ‚ü® Œ£‚ÇÇ ‚à• takeMVar c‚ÇÇ ‚ü©
                  
    -- Deciding whether r points to E or F is a read operation!!!
    takeMVar : ‚àÄ {l : Label} {œÑ : Ty} {n : CTerm Nat} {Œ£ : Store ls} -> (q : l ‚àà ls) (r : TypedIx œÑ F n (getMemory q Œ£)) ->
               ‚ü® Œ£ ‚à• takeMVar {Œ± = œÑ}  (Res n) ‚ü© ‚üº ‚ü® Œ£ ‚à•  unlabel refl-‚äë (Œ£ [ q ][ r ]) ‚ü©
              
    takeMVarEx : ‚àÄ {l œÑ} {Œ£ : Store ls} {e : CTerm Exception} -> ‚ü® Œ£ ‚à• takeMVar {Œ± = œÑ} (Res‚Çì {l = l} e) ‚ü© ‚üº ‚ü® Œ£ ‚à• Throw e ‚ü©

  -- A program is a Redex if it can be reduced further in a certain memory configuration
  data Redex {ls : List Label} {œÑ : Ty} (s‚ÇÅ : Store ls) (c‚ÇÅ : CTerm œÑ) : Set where
    Step : {s‚ÇÇ : Store ls} {c‚ÇÇ : CTerm œÑ} -> ‚ü® s‚ÇÅ ‚à• c‚ÇÅ ‚ü© ‚üº ‚ü® s‚ÇÇ ‚à• c‚ÇÇ ‚ü© -> Redex s‚ÇÅ c‚ÇÅ

  -- Normal forms
  -- A closed term is in normal form for a given store configuration if it cannot be reduced further
  NormalForm : ‚àÄ {ls œÑ} -> Store ls -> CTerm œÑ -> Set
  NormalForm s‚ÇÅ c = ¬¨ Redex s‚ÇÅ c

--------------------------------------------------------------------------------

data Stuck {ls : List Label} {œÑ : Ty} (Œ£ : Store ls) (t : CTerm œÑ) : Set where
  stuck : ¬¨ (Redex Œ£ t) -> ¬¨ (IsValue t) -> Stuck Œ£ t

data PStatus {ls : List Label} {œÑ : Ty} (Œ£ : Store ls) (t : CTerm œÑ) : Set where
  V : IsValue t -> PStatus Œ£ t
  R : Redex Œ£ t -> PStatus Œ£ t
  S : Stuck Œ£ t -> PStatus Œ£ t
  
postulate programStatus : ‚àÄ {œÑ ls} -> (Œ£ : Store ls) (t : CTerm œÑ) -> PStatus Œ£ t
